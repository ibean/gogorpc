/*
 * Code generated by protoc-gen-pbrpc. DO NOT EDIT.
 * source: sample/services.proto
 */

package sample

import (
    "context"
    "reflect"

    pbrpc "github.com/let-z-go/pbrpc"
)

// ClientService ///////////////////////////////////////////////////////////////

const (
    ClientServiceName = "Client"

    ClientService_GetNickname = 0
)

type ClientServiceClient struct {
    methodCaller pbrpc.MethodCaller
    resourceID   string
    extraData    map[string][]byte
    autoRetry    bool
}

func MakeClientServiceClient(methodCaller pbrpc.MethodCaller) ClientServiceClient {
    return ClientServiceClient{
        methodCaller: methodCaller,
        resourceID: "",
        extraData: nil,
        autoRetry: false,
    }
}

func (self ClientServiceClient) WithResourceID(resourceID string) ClientServiceClient {
    return ClientServiceClient{
        methodCaller: self.methodCaller,
        resourceID: resourceID,
        extraData: self.extraData,
        autoRetry: self.autoRetry,
    }
}

func (self ClientServiceClient) WithExtraData(extraData map[string][]byte) ClientServiceClient {
    return ClientServiceClient{
        methodCaller: self.methodCaller,
        resourceID: self.resourceID,
        extraData: extraData,
        autoRetry: self.autoRetry,
    }
}

func (self ClientServiceClient) WithAutoRetry(autoRetry bool) ClientServiceClient {
    return ClientServiceClient{
        methodCaller: self.methodCaller,
        resourceID: self.resourceID,
        extraData: self.extraData,
        autoRetry: autoRetry,
    }
}

func (self ClientServiceClient) GetNickname(context_ context.Context) (*GetNicknameResponse, error) {
    _ = pbrpc.IncomingMessage(&GetNicknameResponse{})
    methodRecord := &methodTableOfClientService[ClientService_GetNickname]
    response, e := self.methodCaller.CallMethod(context_, ClientServiceName, methodRecord.Name, methodRecord.Index, self.resourceID, self.extraData, &pbrpc.Void{}, methodRecord.ResponseType, self.autoRetry)

    if e != nil {
        return nil, e
    }

    return response.(*GetNicknameResponse), e
}

type ClientServiceHandlerBase struct {}

func (ClientServiceHandlerBase) X_GetName() string { return ClientServiceName }
func (ClientServiceHandlerBase) X_GetMethodTable() pbrpc.MethodTable { return methodTableOfClientService }

// `ClientServiceHandler` template:
//
// type ClientServiceHandler struct {
//     ClientServiceHandlerBase
// }
//
// func (ClientServiceHandler) GetNickname(context_ context.Context) (*GetNicknameResponse, error)

var methodTableOfClientService = pbrpc.MethodTable{
    ClientService_GetNickname: {
        ClientService_GetNickname,
        "GetNickname",
        reflect.TypeOf(pbrpc.Void{}),
        reflect.TypeOf(GetNicknameResponse{}),

        func(serviceHandler pbrpc.ServiceHandler, context_ context.Context, _ interface{}) (pbrpc.OutgoingMessage, error) {
            methodHandler, ok := serviceHandler.(interface { GetNickname(context.Context) (*GetNicknameResponse, error) })

            if !ok {
                return nil, pbrpc.X_MakeError(pbrpc.ErrorNotImplemented, "", nil)
            }

            return methodHandler.GetNickname(context_)
        },
    },
}

// ServerService ///////////////////////////////////////////////////////////////

const (
    ServerServiceName = "Server"

    ServerService_SayHello = 0
)

type ServerServiceClient struct {
    methodCaller pbrpc.MethodCaller
    resourceID   string
    extraData    map[string][]byte
    autoRetry    bool
}

func MakeServerServiceClient(methodCaller pbrpc.MethodCaller) ServerServiceClient {
    return ServerServiceClient{
        methodCaller: methodCaller,
        resourceID: "",
        extraData: nil,
        autoRetry: false,
    }
}

func (self ServerServiceClient) WithResourceID(resourceID string) ServerServiceClient {
    return ServerServiceClient{
        methodCaller: self.methodCaller,
        resourceID: resourceID,
        extraData: self.extraData,
        autoRetry: self.autoRetry,
    }
}

func (self ServerServiceClient) WithExtraData(extraData map[string][]byte) ServerServiceClient {
    return ServerServiceClient{
        methodCaller: self.methodCaller,
        resourceID: self.resourceID,
        extraData: extraData,
        autoRetry: self.autoRetry,
    }
}

func (self ServerServiceClient) WithAutoRetry(autoRetry bool) ServerServiceClient {
    return ServerServiceClient{
        methodCaller: self.methodCaller,
        resourceID: self.resourceID,
        extraData: self.extraData,
        autoRetry: autoRetry,
    }
}

func (self ServerServiceClient) SayHello(context_ context.Context, request *SayHelloRequest) (*SayHelloResponse, error) {
    _ = pbrpc.IncomingMessage(&SayHelloResponse{})
    methodRecord := &methodTableOfServerService[ServerService_SayHello]
    response, e := self.methodCaller.CallMethod(context_, ServerServiceName, methodRecord.Name, methodRecord.Index, self.resourceID, self.extraData, request, methodRecord.ResponseType, self.autoRetry)

    if e != nil {
        return nil, e
    }

    return response.(*SayHelloResponse), e
}

type ServerServiceHandlerBase struct {}

func (ServerServiceHandlerBase) X_GetName() string { return ServerServiceName }
func (ServerServiceHandlerBase) X_GetMethodTable() pbrpc.MethodTable { return methodTableOfServerService }

// `ServerServiceHandler` template:
//
// type ServerServiceHandler struct {
//     ServerServiceHandlerBase
// }
//
// func (ServerServiceHandler) SayHello(context_ context.Context, request *SayHelloRequest) (*SayHelloResponse, error)

var methodTableOfServerService = pbrpc.MethodTable{
    ServerService_SayHello: {
        ServerService_SayHello,
        "SayHello",
        reflect.TypeOf(SayHelloRequest{}),
        reflect.TypeOf(SayHelloResponse{}),

        func(serviceHandler pbrpc.ServiceHandler, context_ context.Context, request interface{}) (pbrpc.OutgoingMessage, error) {
            methodHandler, ok := serviceHandler.(interface { SayHello(context.Context, *SayHelloRequest) (*SayHelloResponse, error) })

            if !ok {
                return nil, pbrpc.X_MakeError(pbrpc.ErrorNotImplemented, "", nil)
            }

            return methodHandler.SayHello(context_, request.(*SayHelloRequest))
        },
    },
}
