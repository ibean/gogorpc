/*
 * Code generated by protoc-gen-pbrpc. DO NOT EDIT.
 * source: services.proto
 */

package sample

import (
    "context"
    "reflect"

    pbrpc "github.com/let-z-go/pbrpc"
)

// ClientService ///////////////////////////////////////////////////////////////

const (
    ClientServiceName = "Client"

    ClientService_GetNickname = 0
)

type ClientServiceClient struct {
    MethodCaller pbrpc.MethodCaller
    Context context.Context
}

func (self ClientServiceClient) GetNickname(autoRetry bool) (*GetNicknameResponse, error) {
    _ = pbrpc.IncomingMessage(&GetNicknameResponse{})
    methodRecord := &methodTableOfClientService[ClientService_GetNickname]
    response, e := self.MethodCaller.CallMethod(self.Context, ClientServiceName, methodRecord.Name, &pbrpc.Void{}, methodRecord.ResponseType, autoRetry)

    if e != nil {
        return nil, e
    }

    return response.(*GetNicknameResponse), e
}

type ClientServiceHandlerBase struct {
    pbrpc.ServiceHandlerBase
}

func (*ClientServiceHandlerBase) X_GetName() string { return ClientServiceName }
func (*ClientServiceHandlerBase) X_GetMethodTable() pbrpc.MethodTable { return methodTableOfClientService }

// `ClientServiceHandler` template:
//
// type ClientServiceHandler struct {
//     ClientServiceHandlerBase
// }
//
// func (*ClientServiceHandler) GetNickname(context_ context.Context) (*GetNicknameResponse, error)

var methodTableOfClientService = pbrpc.MethodTable{
    ClientService_GetNickname: {
        ClientService_GetNickname,
        "GetNickname",
        reflect.TypeOf(pbrpc.Void{}),
        reflect.TypeOf(GetNicknameResponse{}),

        func(serviceHandler pbrpc.ServiceHandler, context_ context.Context, _ interface{}) (pbrpc.OutgoingMessage, error) {
            methodHandler, ok := serviceHandler.(interface { GetNickname(context.Context) (*GetNicknameResponse, error) })

            if !ok {
                return nil, pbrpc.MakeError(pbrpc.ErrorNotImplemented)
            }

            return methodHandler.GetNickname(context_)
        },
    },
}

// ServerService ///////////////////////////////////////////////////////////////

const (
    ServerServiceName = "Server"

    ServerService_SayHello = 0
)

type ServerServiceClient struct {
    MethodCaller pbrpc.MethodCaller
    Context context.Context
}

func (self ServerServiceClient) SayHello(request *SayHelloRequest, autoRetry bool) (*SayHelloResponse, error) {
    _ = pbrpc.IncomingMessage(&SayHelloResponse{})
    methodRecord := &methodTableOfServerService[ServerService_SayHello]
    response, e := self.MethodCaller.CallMethod(self.Context, ServerServiceName, methodRecord.Name, request, methodRecord.ResponseType, autoRetry)

    if e != nil {
        return nil, e
    }

    return response.(*SayHelloResponse), e
}

type ServerServiceHandlerBase struct {
    pbrpc.ServiceHandlerBase
}

func (*ServerServiceHandlerBase) X_GetName() string { return ServerServiceName }
func (*ServerServiceHandlerBase) X_GetMethodTable() pbrpc.MethodTable { return methodTableOfServerService }

// `ServerServiceHandler` template:
//
// type ServerServiceHandler struct {
//     ServerServiceHandlerBase
// }
//
// func (*ServerServiceHandler) SayHello(context_ context.Context, request *SayHelloRequest) (*SayHelloResponse, error)

var methodTableOfServerService = pbrpc.MethodTable{
    ServerService_SayHello: {
        ServerService_SayHello,
        "SayHello",
        reflect.TypeOf(SayHelloRequest{}),
        reflect.TypeOf(SayHelloResponse{}),

        func(serviceHandler pbrpc.ServiceHandler, context_ context.Context, request interface{}) (pbrpc.OutgoingMessage, error) {
            methodHandler, ok := serviceHandler.(interface { SayHello(context.Context, *SayHelloRequest) (*SayHelloResponse, error) })

            if !ok {
                return nil, pbrpc.MakeError(pbrpc.ErrorNotImplemented)
            }

            return methodHandler.SayHello(context_, request.(*SayHelloRequest))
        },
    },
}
