// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/let-z-go/gogorpc/internal/proto/stream.proto

package proto

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RPCErrorType int32

const (
	RPC_ERROR_NONE                RPCErrorType = 0
	RPC_ERROR_BAD_REQUEST         RPCErrorType = 400
	RPC_ERROR_UNAUTHORIZED        RPCErrorType = 401
	RPC_ERROR_FORBIDDEN           RPCErrorType = 403
	RPC_ERROR_NOT_FOUND           RPCErrorType = 404
	RPC_ERROR_TOO_MANY_REQUESTS   RPCErrorType = 429
	RPC_ERROR_INTERNAL_SERVER     RPCErrorType = 500
	RPC_ERROR_NOT_IMPLEMENTED     RPCErrorType = 501
	RPC_ERROR_BAD_GATEWAY         RPCErrorType = 502
	RPC_ERROR_SERVICE_UNAVAILABLE RPCErrorType = 503
	RPC_ERROR_GATEWAY_TIMEOUT     RPCErrorType = 504
)

var RPCErrorType_name = map[int32]string{
	0:   "RPC_ERROR_NONE",
	400: "RPC_ERROR_BAD_REQUEST",
	401: "RPC_ERROR_UNAUTHORIZED",
	403: "RPC_ERROR_FORBIDDEN",
	404: "RPC_ERROR_NOT_FOUND",
	429: "RPC_ERROR_TOO_MANY_REQUESTS",
	500: "RPC_ERROR_INTERNAL_SERVER",
	501: "RPC_ERROR_NOT_IMPLEMENTED",
	502: "RPC_ERROR_BAD_GATEWAY",
	503: "RPC_ERROR_SERVICE_UNAVAILABLE",
	504: "RPC_ERROR_GATEWAY_TIMEOUT",
}

var RPCErrorType_value = map[string]int32{
	"RPC_ERROR_NONE":                0,
	"RPC_ERROR_BAD_REQUEST":         400,
	"RPC_ERROR_UNAUTHORIZED":        401,
	"RPC_ERROR_FORBIDDEN":           403,
	"RPC_ERROR_NOT_FOUND":           404,
	"RPC_ERROR_TOO_MANY_REQUESTS":   429,
	"RPC_ERROR_INTERNAL_SERVER":     500,
	"RPC_ERROR_NOT_IMPLEMENTED":     501,
	"RPC_ERROR_BAD_GATEWAY":         502,
	"RPC_ERROR_SERVICE_UNAVAILABLE": 503,
	"RPC_ERROR_GATEWAY_TIMEOUT":     504,
}

func (x RPCErrorType) String() string {
	return proto.EnumName(RPCErrorType_name, int32(x))
}

func (RPCErrorType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4187f59d13635016, []int{0}
}

type HangupCode int32

const (
	HANGUP_ABORTED                    HangupCode = 0
	HANGUP_BAD_INCOMING_EVENT         HangupCode = 1
	HANGUP_TOO_MANY_INCOMING_REQUESTS HangupCode = 2
	HANGUP_OUTGOING_PACKET_TOO_LARGE  HangupCode = 3
	HANGUP_SYSTEM                     HangupCode = 4
)

var HangupCode_name = map[int32]string{
	0: "HANGUP_ABORTED",
	1: "HANGUP_BAD_INCOMING_EVENT",
	2: "HANGUP_TOO_MANY_INCOMING_REQUESTS",
	3: "HANGUP_OUTGOING_PACKET_TOO_LARGE",
	4: "HANGUP_SYSTEM",
}

var HangupCode_value = map[string]int32{
	"HANGUP_ABORTED":                    0,
	"HANGUP_BAD_INCOMING_EVENT":         1,
	"HANGUP_TOO_MANY_INCOMING_REQUESTS": 2,
	"HANGUP_OUTGOING_PACKET_TOO_LARGE":  3,
	"HANGUP_SYSTEM":                     4,
}

func (x HangupCode) String() string {
	return proto.EnumName(HangupCode_name, int32(x))
}

func (HangupCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4187f59d13635016, []int{1}
}

type StreamHandshakeHeader struct {
	IncomingKeepaliveInterval int32 `protobuf:"varint,1,opt,name=incoming_keepalive_interval,json=incomingKeepaliveInterval,proto3" json:"incoming_keepalive_interval,omitempty"`
	OutgoingKeepaliveInterval int32 `protobuf:"varint,2,opt,name=outgoing_keepalive_interval,json=outgoingKeepaliveInterval,proto3" json:"outgoing_keepalive_interval,omitempty"`
	IncomingConcurrencyLimit  int32 `protobuf:"varint,3,opt,name=incoming_concurrency_limit,json=incomingConcurrencyLimit,proto3" json:"incoming_concurrency_limit,omitempty"`
	OutgoingConcurrencyLimit  int32 `protobuf:"varint,4,opt,name=outgoing_concurrency_limit,json=outgoingConcurrencyLimit,proto3" json:"outgoing_concurrency_limit,omitempty"`
}

func (m *StreamHandshakeHeader) Reset()         { *m = StreamHandshakeHeader{} }
func (m *StreamHandshakeHeader) String() string { return proto.CompactTextString(m) }
func (*StreamHandshakeHeader) ProtoMessage()    {}
func (*StreamHandshakeHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_4187f59d13635016, []int{0}
}
func (m *StreamHandshakeHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamHandshakeHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamHandshakeHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamHandshakeHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamHandshakeHeader.Merge(m, src)
}
func (m *StreamHandshakeHeader) XXX_Size() int {
	return m.Size()
}
func (m *StreamHandshakeHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamHandshakeHeader.DiscardUnknown(m)
}

var xxx_messageInfo_StreamHandshakeHeader proto.InternalMessageInfo

func (m *StreamHandshakeHeader) GetIncomingKeepaliveInterval() int32 {
	if m != nil {
		return m.IncomingKeepaliveInterval
	}
	return 0
}

func (m *StreamHandshakeHeader) GetOutgoingKeepaliveInterval() int32 {
	if m != nil {
		return m.OutgoingKeepaliveInterval
	}
	return 0
}

func (m *StreamHandshakeHeader) GetIncomingConcurrencyLimit() int32 {
	if m != nil {
		return m.IncomingConcurrencyLimit
	}
	return 0
}

func (m *StreamHandshakeHeader) GetOutgoingConcurrencyLimit() int32 {
	if m != nil {
		return m.OutgoingConcurrencyLimit
	}
	return 0
}

type RequestHeader struct {
	SequenceNumber int32             `protobuf:"varint,1,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	ServiceName    string            `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	MethodName     string            `protobuf:"bytes,3,opt,name=method_name,json=methodName,proto3" json:"method_name,omitempty"`
	ExtraData      map[string][]byte `protobuf:"bytes,4,rep,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Deadline       int64             `protobuf:"varint,5,opt,name=deadline,proto3" json:"deadline,omitempty"`
	TraceId        UUID              `protobuf:"bytes,6,opt,name=trace_id,json=traceId,proto3" json:"trace_id"`
}

func (m *RequestHeader) Reset()         { *m = RequestHeader{} }
func (m *RequestHeader) String() string { return proto.CompactTextString(m) }
func (*RequestHeader) ProtoMessage()    {}
func (*RequestHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_4187f59d13635016, []int{1}
}
func (m *RequestHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestHeader.Merge(m, src)
}
func (m *RequestHeader) XXX_Size() int {
	return m.Size()
}
func (m *RequestHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestHeader.DiscardUnknown(m)
}

var xxx_messageInfo_RequestHeader proto.InternalMessageInfo

func (m *RequestHeader) GetSequenceNumber() int32 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *RequestHeader) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *RequestHeader) GetMethodName() string {
	if m != nil {
		return m.MethodName
	}
	return ""
}

func (m *RequestHeader) GetExtraData() map[string][]byte {
	if m != nil {
		return m.ExtraData
	}
	return nil
}

func (m *RequestHeader) GetDeadline() int64 {
	if m != nil {
		return m.Deadline
	}
	return 0
}

func (m *RequestHeader) GetTraceId() UUID {
	if m != nil {
		return m.TraceId
	}
	return UUID{}
}

type ResponseHeader struct {
	SequenceNumber int32             `protobuf:"varint,1,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	ExtraData      map[string][]byte `protobuf:"bytes,2,rep,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RpcError       RPCError          `protobuf:"bytes,3,opt,name=rpc_error,json=rpcError,proto3" json:"rpc_error"`
}

func (m *ResponseHeader) Reset()         { *m = ResponseHeader{} }
func (m *ResponseHeader) String() string { return proto.CompactTextString(m) }
func (*ResponseHeader) ProtoMessage()    {}
func (*ResponseHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_4187f59d13635016, []int{2}
}
func (m *ResponseHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseHeader.Merge(m, src)
}
func (m *ResponseHeader) XXX_Size() int {
	return m.Size()
}
func (m *ResponseHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseHeader.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseHeader proto.InternalMessageInfo

func (m *ResponseHeader) GetSequenceNumber() int32 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *ResponseHeader) GetExtraData() map[string][]byte {
	if m != nil {
		return m.ExtraData
	}
	return nil
}

func (m *ResponseHeader) GetRpcError() RPCError {
	if m != nil {
		return m.RpcError
	}
	return RPCError{}
}

type RPCError struct {
	Type RPCErrorType `protobuf:"varint,1,opt,name=type,proto3,enum=gogorpc.proto.RPCErrorType" json:"type,omitempty"`
	Code string       `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Desc string       `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (m *RPCError) Reset()         { *m = RPCError{} }
func (m *RPCError) String() string { return proto.CompactTextString(m) }
func (*RPCError) ProtoMessage()    {}
func (*RPCError) Descriptor() ([]byte, []int) {
	return fileDescriptor_4187f59d13635016, []int{3}
}
func (m *RPCError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RPCError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RPCError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RPCError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RPCError.Merge(m, src)
}
func (m *RPCError) XXX_Size() int {
	return m.Size()
}
func (m *RPCError) XXX_DiscardUnknown() {
	xxx_messageInfo_RPCError.DiscardUnknown(m)
}

var xxx_messageInfo_RPCError proto.InternalMessageInfo

func (m *RPCError) GetType() RPCErrorType {
	if m != nil {
		return m.Type
	}
	return RPC_ERROR_NONE
}

func (m *RPCError) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *RPCError) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

type Hangup struct {
	Code      HangupCode        `protobuf:"varint,1,opt,name=code,proto3,enum=gogorpc.proto.HangupCode" json:"code,omitempty"`
	ExtraData map[string][]byte `protobuf:"bytes,2,rep,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Hangup) Reset()         { *m = Hangup{} }
func (m *Hangup) String() string { return proto.CompactTextString(m) }
func (*Hangup) ProtoMessage()    {}
func (*Hangup) Descriptor() ([]byte, []int) {
	return fileDescriptor_4187f59d13635016, []int{4}
}
func (m *Hangup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Hangup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Hangup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Hangup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Hangup.Merge(m, src)
}
func (m *Hangup) XXX_Size() int {
	return m.Size()
}
func (m *Hangup) XXX_DiscardUnknown() {
	xxx_messageInfo_Hangup.DiscardUnknown(m)
}

var xxx_messageInfo_Hangup proto.InternalMessageInfo

func (m *Hangup) GetCode() HangupCode {
	if m != nil {
		return m.Code
	}
	return HANGUP_ABORTED
}

func (m *Hangup) GetExtraData() map[string][]byte {
	if m != nil {
		return m.ExtraData
	}
	return nil
}

func init() {
	proto.RegisterEnum("gogorpc.proto.RPCErrorType", RPCErrorType_name, RPCErrorType_value)
	proto.RegisterEnum("gogorpc.proto.HangupCode", HangupCode_name, HangupCode_value)
	proto.RegisterType((*StreamHandshakeHeader)(nil), "gogorpc.proto.StreamHandshakeHeader")
	proto.RegisterType((*RequestHeader)(nil), "gogorpc.proto.RequestHeader")
	proto.RegisterMapType((map[string][]byte)(nil), "gogorpc.proto.RequestHeader.ExtraDataEntry")
	proto.RegisterType((*ResponseHeader)(nil), "gogorpc.proto.ResponseHeader")
	proto.RegisterMapType((map[string][]byte)(nil), "gogorpc.proto.ResponseHeader.ExtraDataEntry")
	proto.RegisterType((*RPCError)(nil), "gogorpc.proto.RPCError")
	proto.RegisterType((*Hangup)(nil), "gogorpc.proto.Hangup")
	proto.RegisterMapType((map[string][]byte)(nil), "gogorpc.proto.Hangup.ExtraDataEntry")
}

func init() {
	proto.RegisterFile("github.com/let-z-go/gogorpc/internal/proto/stream.proto", fileDescriptor_4187f59d13635016)
}

var fileDescriptor_4187f59d13635016 = []byte{
	// 913 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x95, 0xdf, 0x6e, 0xe3, 0x44,
	0x14, 0xc6, 0xe3, 0x38, 0x2d, 0xed, 0x69, 0x1b, 0xcc, 0x2c, 0x0b, 0x69, 0xaa, 0xcd, 0x66, 0xa3,
	0x45, 0x54, 0x85, 0x26, 0x52, 0x01, 0x81, 0x56, 0x2b, 0x24, 0x27, 0x99, 0x4d, 0x4c, 0x13, 0x3b,
	0x4c, 0x9c, 0xa2, 0xee, 0x8d, 0xe5, 0xda, 0x43, 0x6a, 0x35, 0xb1, 0x8d, 0x63, 0x57, 0x84, 0x2b,
	0x1e, 0x61, 0xd1, 0x72, 0xcf, 0x13, 0xf0, 0x02, 0x3c, 0xc1, 0x5e, 0x96, 0xbb, 0xbd, 0x42, 0xd0,
	0xbe, 0x02, 0xff, 0x2e, 0xd1, 0x8c, 0xed, 0xa4, 0x4d, 0xb7, 0x68, 0x57, 0x7b, 0x95, 0x39, 0xe7,
	0xfc, 0xbe, 0x73, 0xe6, 0x7c, 0x1e, 0x29, 0xf0, 0xe9, 0xd0, 0x09, 0x8f, 0xa3, 0xa3, 0xaa, 0xe5,
	0x8d, 0x6b, 0x23, 0x1a, 0xee, 0x7e, 0xb7, 0x3b, 0xf4, 0x6a, 0x43, 0x6f, 0xe8, 0x05, 0xbe, 0x55,
	0x73, 0xdc, 0x90, 0x06, 0xae, 0x39, 0xaa, 0xf9, 0x81, 0x17, 0x7a, 0xb5, 0x49, 0x18, 0x50, 0x73,
	0x5c, 0xe5, 0x01, 0xda, 0x48, 0xa0, 0x38, 0x2c, 0xee, 0x5e, 0xea, 0xc3, 0x2a, 0xb1, 0xe4, 0x28,
	0xfa, 0x9a, 0x47, 0xb1, 0x9e, 0x9d, 0x12, 0xfc, 0x93, 0x57, 0x18, 0x1b, 0x45, 0x8e, 0x1d, 0xcb,
	0x2a, 0x4f, 0xb3, 0x70, 0xbb, 0xcf, 0x6f, 0xd1, 0x36, 0x5d, 0x7b, 0x72, 0x6c, 0x9e, 0xd0, 0x36,
	0x35, 0x6d, 0x1a, 0xa0, 0xcf, 0x61, 0xcb, 0x71, 0x2d, 0x6f, 0xec, 0xb8, 0x43, 0xe3, 0x84, 0x52,
	0xdf, 0x1c, 0x39, 0xa7, 0xd4, 0xe0, 0x9d, 0x4e, 0xcd, 0x51, 0x41, 0x28, 0x0b, 0xdb, 0x4b, 0x64,
	0x33, 0x45, 0xf6, 0x53, 0x42, 0x49, 0x00, 0xa6, 0xf7, 0xa2, 0x70, 0xe8, 0xdd, 0xa0, 0xcf, 0xc6,
	0xfa, 0x14, 0xb9, 0xae, 0x7f, 0x08, 0xc5, 0xd9, 0x7c, 0xcb, 0x73, 0xad, 0x28, 0x08, 0xa8, 0x6b,
	0x4d, 0x8d, 0x91, 0x33, 0x76, 0xc2, 0x82, 0xc8, 0xe5, 0x85, 0x94, 0x68, 0xcc, 0x81, 0x0e, 0xab,
	0x33, 0xf5, 0x6c, 0xfa, 0x75, 0x75, 0x2e, 0x56, 0xa7, 0xc4, 0xa2, 0xba, 0xf2, 0x3c, 0x0b, 0x1b,
	0x84, 0x7e, 0x13, 0xd1, 0x49, 0x98, 0xb8, 0xf1, 0x3e, 0xbc, 0x39, 0x61, 0x09, 0xd7, 0xa2, 0x86,
	0x1b, 0x8d, 0x8f, 0x68, 0x90, 0x38, 0x90, 0x4f, 0xd3, 0x2a, 0xcf, 0xa2, 0x7b, 0xb0, 0x3e, 0xa1,
	0xc1, 0xa9, 0xc3, 0x38, 0x73, 0x4c, 0xf9, 0x9e, 0xab, 0x64, 0x2d, 0xc9, 0xa9, 0xe6, 0x98, 0xa2,
	0xbb, 0xb0, 0x36, 0xa6, 0xe1, 0xb1, 0x67, 0xc7, 0x84, 0xc8, 0x09, 0x88, 0x53, 0x1c, 0xf8, 0x02,
	0x80, 0x7e, 0x1b, 0x06, 0xa6, 0x61, 0x9b, 0xa1, 0x59, 0xc8, 0x95, 0xc5, 0xed, 0xb5, 0xbd, 0x0f,
	0xaa, 0x57, 0x9e, 0x47, 0xf5, 0xca, 0xf5, 0xaa, 0x98, 0xe1, 0x4d, 0x33, 0x34, 0xb1, 0x1b, 0x06,
	0x53, 0xb2, 0x4a, 0xd3, 0x18, 0x15, 0x61, 0xc5, 0xa6, 0xa6, 0x3d, 0x72, 0x5c, 0x5a, 0x58, 0x2a,
	0x0b, 0xdb, 0x22, 0x99, 0xc5, 0xe8, 0x63, 0x58, 0x09, 0x03, 0xd3, 0xa2, 0x86, 0x63, 0x17, 0x96,
	0xcb, 0xc2, 0xf6, 0xda, 0xde, 0xad, 0x85, 0x29, 0x83, 0x81, 0xd2, 0xac, 0xe7, 0x9e, 0xfd, 0x76,
	0x37, 0x43, 0xde, 0xe0, 0xa8, 0x62, 0x17, 0x1f, 0x42, 0xfe, 0xea, 0x38, 0x24, 0x81, 0x78, 0x42,
	0xa7, 0xdc, 0x90, 0x55, 0xc2, 0x8e, 0xe8, 0x6d, 0x58, 0x3a, 0x35, 0x47, 0x51, 0xbc, 0xfe, 0x3a,
	0x89, 0x83, 0x07, 0xd9, 0xcf, 0x84, 0xca, 0xf7, 0x59, 0xc8, 0x13, 0x3a, 0xf1, 0x3d, 0x77, 0x42,
	0x5f, 0xd5, 0xdb, 0xfd, 0x2b, 0xbe, 0x64, 0xb9, 0x2f, 0x1f, 0x5e, 0xf3, 0xe5, 0x72, 0xef, 0xff,
	0x31, 0xe6, 0x01, 0xac, 0x06, 0xbe, 0x65, 0xd0, 0x20, 0xf0, 0x02, 0xfe, 0x0d, 0xd6, 0xf6, 0xde,
	0x5d, 0xec, 0xd5, 0x6b, 0x60, 0x56, 0x4e, 0x1c, 0x58, 0x09, 0x7c, 0x8b, 0xc7, 0xaf, 0x69, 0x81,
	0x05, 0x2b, 0x69, 0x67, 0x54, 0x83, 0x5c, 0x38, 0xf5, 0x29, 0x17, 0xe6, 0xf7, 0xb6, 0x6e, 0xb8,
	0x80, 0x3e, 0xf5, 0x29, 0xe1, 0x20, 0x42, 0x90, 0xb3, 0x3c, 0x3b, 0x7d, 0x57, 0xfc, 0xcc, 0x72,
	0x36, 0x9d, 0x58, 0xc9, 0x4b, 0xe2, 0xe7, 0xca, 0x2f, 0x02, 0x2c, 0xb7, 0x4d, 0x77, 0x18, 0xf9,
	0x68, 0x37, 0x91, 0xc4, 0x33, 0x36, 0x17, 0x66, 0xc4, 0x50, 0xc3, 0xb3, 0x69, 0xd2, 0xad, 0xf1,
	0x02, 0x97, 0xef, 0xbf, 0x50, 0x74, 0xb3, 0xbb, 0xaf, 0xe7, 0xd0, 0xce, 0xaf, 0x59, 0x58, 0xbf,
	0xbc, 0x3b, 0x42, 0x90, 0x27, 0xbd, 0x86, 0x81, 0x09, 0xd1, 0x88, 0xa1, 0x6a, 0x2a, 0x96, 0x32,
	0xa8, 0x08, 0xb7, 0xe7, 0xb9, 0xba, 0xdc, 0x34, 0x08, 0xfe, 0x72, 0x80, 0xfb, 0xba, 0xf4, 0x44,
	0x44, 0x5b, 0xf0, 0xce, 0xbc, 0x36, 0x50, 0xe5, 0x81, 0xde, 0xd6, 0x88, 0xf2, 0x18, 0x37, 0xa5,
	0x1f, 0x44, 0x54, 0x80, 0x5b, 0xf3, 0xe2, 0x23, 0x8d, 0xd4, 0x95, 0x66, 0x13, 0xab, 0xd2, 0xd3,
	0x85, 0x8a, 0xaa, 0xe9, 0xc6, 0x23, 0x6d, 0xa0, 0x36, 0xa5, 0x1f, 0x45, 0x54, 0x86, 0xad, 0x79,
	0x45, 0xd7, 0x34, 0xa3, 0x2b, 0xab, 0x87, 0xe9, 0xc4, 0xbe, 0xf4, 0xb3, 0x88, 0x4a, 0xb0, 0x39,
	0x27, 0x14, 0x55, 0xc7, 0x44, 0x95, 0x3b, 0x46, 0x1f, 0x93, 0x03, 0x4c, 0xa4, 0x3f, 0x17, 0xea,
	0xac, 0xb7, 0xd2, 0xed, 0x75, 0x70, 0x17, 0xab, 0x3a, 0x6e, 0x4a, 0x7f, 0x89, 0xd7, 0xd7, 0x69,
	0xc9, 0x3a, 0xfe, 0x4a, 0x3e, 0x94, 0xfe, 0x16, 0x51, 0x05, 0xee, 0xcc, 0x6b, 0xac, 0xa5, 0xd2,
	0xc0, 0x6c, 0xad, 0x03, 0x59, 0xe9, 0xc8, 0xf5, 0x0e, 0x96, 0xfe, 0x59, 0xe8, 0x9f, 0x68, 0x0d,
	0x5d, 0xe9, 0x62, 0x6d, 0xa0, 0x4b, 0xff, 0x8a, 0x3b, 0x3f, 0x09, 0x00, 0xf3, 0x6f, 0xcd, 0x1c,
	0x6d, 0xcb, 0x6a, 0x6b, 0xd0, 0x33, 0xe4, 0xba, 0x46, 0xd8, 0x1d, 0x32, 0xe8, 0x0e, 0x6c, 0x26,
	0x39, 0x36, 0x5f, 0x51, 0x1b, 0x5a, 0x57, 0x51, 0x5b, 0x06, 0x3e, 0xc0, 0xaa, 0x2e, 0x09, 0xe8,
	0x3d, 0xb8, 0x97, 0x94, 0x67, 0x06, 0xcc, 0x98, 0x99, 0x13, 0x59, 0x74, 0x1f, 0xca, 0x09, 0xa6,
	0x0d, 0xf4, 0x96, 0xc6, 0xaa, 0x3d, 0xb9, 0xb1, 0x8f, 0x75, 0x2e, 0xeb, 0xc8, 0xa4, 0x85, 0x25,
	0x11, 0xbd, 0x05, 0x1b, 0x09, 0xd5, 0x3f, 0xec, 0xeb, 0xb8, 0x2b, 0xe5, 0xea, 0xed, 0xb3, 0x3f,
	0x4a, 0x99, 0x67, 0xe7, 0x25, 0xe1, 0xec, 0xbc, 0x24, 0xfc, 0x7e, 0x5e, 0x12, 0x9e, 0x5c, 0x94,
	0x32, 0x67, 0x17, 0xa5, 0xcc, 0xf3, 0x8b, 0x52, 0xe6, 0xf1, 0xce, 0xcb, 0xff, 0xc1, 0x1d, 0x2d,
	0xf3, 0x9f, 0x8f, 0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x21, 0x93, 0x96, 0x11, 0x8c, 0x07, 0x00,
	0x00,
}

func (m *StreamHandshakeHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamHandshakeHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamHandshakeHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OutgoingConcurrencyLimit != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.OutgoingConcurrencyLimit))
		i--
		dAtA[i] = 0x20
	}
	if m.IncomingConcurrencyLimit != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.IncomingConcurrencyLimit))
		i--
		dAtA[i] = 0x18
	}
	if m.OutgoingKeepaliveInterval != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.OutgoingKeepaliveInterval))
		i--
		dAtA[i] = 0x10
	}
	if m.IncomingKeepaliveInterval != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.IncomingKeepaliveInterval))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RequestHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TraceId.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStream(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.Deadline != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.Deadline))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ExtraData) > 0 {
		for k := range m.ExtraData {
			v := m.ExtraData[k]
			baseI := i
			if len(v) > 0 {
				i -= len(v)
				copy(dAtA[i:], v)
				i = encodeVarintStream(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintStream(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintStream(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.MethodName) > 0 {
		i -= len(m.MethodName)
		copy(dAtA[i:], m.MethodName)
		i = encodeVarintStream(dAtA, i, uint64(len(m.MethodName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ServiceName) > 0 {
		i -= len(m.ServiceName)
		copy(dAtA[i:], m.ServiceName)
		i = encodeVarintStream(dAtA, i, uint64(len(m.ServiceName)))
		i--
		dAtA[i] = 0x12
	}
	if m.SequenceNumber != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.SequenceNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResponseHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RpcError.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStream(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.ExtraData) > 0 {
		for k := range m.ExtraData {
			v := m.ExtraData[k]
			baseI := i
			if len(v) > 0 {
				i -= len(v)
				copy(dAtA[i:], v)
				i = encodeVarintStream(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintStream(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintStream(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.SequenceNumber != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.SequenceNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RPCError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RPCError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RPCError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintStream(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintStream(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Hangup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Hangup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Hangup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExtraData) > 0 {
		for k := range m.ExtraData {
			v := m.ExtraData[k]
			baseI := i
			if len(v) > 0 {
				i -= len(v)
				copy(dAtA[i:], v)
				i = encodeVarintStream(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintStream(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintStream(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Code != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintStream(dAtA []byte, offset int, v uint64) int {
	offset -= sovStream(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StreamHandshakeHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IncomingKeepaliveInterval != 0 {
		n += 1 + sovStream(uint64(m.IncomingKeepaliveInterval))
	}
	if m.OutgoingKeepaliveInterval != 0 {
		n += 1 + sovStream(uint64(m.OutgoingKeepaliveInterval))
	}
	if m.IncomingConcurrencyLimit != 0 {
		n += 1 + sovStream(uint64(m.IncomingConcurrencyLimit))
	}
	if m.OutgoingConcurrencyLimit != 0 {
		n += 1 + sovStream(uint64(m.OutgoingConcurrencyLimit))
	}
	return n
}

func (m *RequestHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SequenceNumber != 0 {
		n += 1 + sovStream(uint64(m.SequenceNumber))
	}
	l = len(m.ServiceName)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	l = len(m.MethodName)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	if len(m.ExtraData) > 0 {
		for k, v := range m.ExtraData {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovStream(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovStream(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovStream(uint64(mapEntrySize))
		}
	}
	if m.Deadline != 0 {
		n += 1 + sovStream(uint64(m.Deadline))
	}
	l = m.TraceId.Size()
	n += 1 + l + sovStream(uint64(l))
	return n
}

func (m *ResponseHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SequenceNumber != 0 {
		n += 1 + sovStream(uint64(m.SequenceNumber))
	}
	if len(m.ExtraData) > 0 {
		for k, v := range m.ExtraData {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovStream(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovStream(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovStream(uint64(mapEntrySize))
		}
	}
	l = m.RpcError.Size()
	n += 1 + l + sovStream(uint64(l))
	return n
}

func (m *RPCError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovStream(uint64(m.Type))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	return n
}

func (m *Hangup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovStream(uint64(m.Code))
	}
	if len(m.ExtraData) > 0 {
		for k, v := range m.ExtraData {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovStream(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovStream(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovStream(uint64(mapEntrySize))
		}
	}
	return n
}

func sovStream(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStream(x uint64) (n int) {
	return sovStream(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StreamHandshakeHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamHandshakeHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamHandshakeHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncomingKeepaliveInterval", wireType)
			}
			m.IncomingKeepaliveInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IncomingKeepaliveInterval |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutgoingKeepaliveInterval", wireType)
			}
			m.OutgoingKeepaliveInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutgoingKeepaliveInterval |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncomingConcurrencyLimit", wireType)
			}
			m.IncomingConcurrencyLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IncomingConcurrencyLimit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutgoingConcurrencyLimit", wireType)
			}
			m.OutgoingConcurrencyLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutgoingConcurrencyLimit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceNumber", wireType)
			}
			m.SequenceNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SequenceNumber |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MethodName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MethodName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtraData == nil {
				m.ExtraData = make(map[string][]byte)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStream
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStream
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthStream
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthStream
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStream
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthStream
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthStream
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipStream(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthStream
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ExtraData[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deadline", wireType)
			}
			m.Deadline = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Deadline |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TraceId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceNumber", wireType)
			}
			m.SequenceNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SequenceNumber |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtraData == nil {
				m.ExtraData = make(map[string][]byte)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStream
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStream
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthStream
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthStream
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStream
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthStream
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthStream
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipStream(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthStream
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ExtraData[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpcError", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RpcError.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RPCError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RPCError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RPCError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= RPCErrorType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Hangup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Hangup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Hangup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= HangupCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtraData == nil {
				m.ExtraData = make(map[string][]byte)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStream
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStream
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthStream
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthStream
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStream
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthStream
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthStream
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipStream(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthStream
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ExtraData[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStream(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStream
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStream
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStream
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStream
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStream
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStream
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStream        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStream          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStream = fmt.Errorf("proto: unexpected end of group")
)
