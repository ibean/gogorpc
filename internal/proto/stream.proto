syntax = "proto3";

package gogorpc.proto;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/let-z-go/gogorpc/internal/proto/uuid.proto";

option go_package = "github.com/let-z-go/gogorpc/internal/proto";
option (gogoproto.goproto_enum_prefix_all) = false;

enum RPCErrorType {
    RPC_ERROR_NONE = 0;

    RPC_ERROR_BAD_REQUEST = 400;
    RPC_ERROR_UNAUTHORIZED = 401;
    RPC_ERROR_FORBIDDEN = 403;
    RPC_ERROR_NOT_FOUND = 404;
    RPC_ERROR_TOO_MANY_REQUESTS = 429;

    RPC_ERROR_INTERNAL_SERVER = 500;
    RPC_ERROR_NOT_IMPLEMENTED = 501;
    RPC_ERROR_BAD_GATEWAY = 502;
    RPC_ERROR_SERVICE_UNAVAILABLE = 503;
    RPC_ERROR_GATEWAY_TIMEOUT = 504;
}

enum HangupCode {
    HANGUP_ABORTED = 0;
    HANGUP_BAD_INCOMING_EVENT = 1;
    HANGUP_TOO_MANY_INCOMING_REQUESTS = 2;
    HANGUP_OUTGOING_PACKET_TOO_LARGE = 3;
    HANGUP_SYSTEM = 4;
}

message StreamHandshakeHeader {
    int32 incoming_keepalive_interval = 1;
    int32 outgoing_keepalive_interval = 2;
    int32 incoming_concurrency_limit = 3;
    int32 outgoing_concurrency_limit = 4;
}

message RequestHeader {
    int32 sequence_number = 1;
    string service_name = 2;
    string method_name = 3;
    map<string, bytes> extra_data = 4;
    int64 deadline = 5;
    UUID trace_id = 6 [ (gogoproto.nullable) = false ];
}

message ResponseHeader {
    int32 sequence_number = 1;
    map<string, bytes> extra_data = 2;
    RPCError rpc_error = 3 [ (gogoproto.nullable) = false ];
}

message RPCError {
    RPCErrorType type = 1;
    string code = 2;
    string desc = 3;
}

message Hangup {
    HangupCode code = 1;
    map<string, bytes> extra_data = 2;
}
