// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/let-z-go/gogorpc/internal/proto/transport.proto

package proto

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EventType int32

const (
	EVENT_KEEPALIVE EventType = 0
	EVENT_REQUEST   EventType = 1
	EVENT_RESPONSE  EventType = 2
	EVENT_HANGUP    EventType = 3
)

var EventType_name = map[int32]string{
	0: "EVENT_KEEPALIVE",
	1: "EVENT_REQUEST",
	2: "EVENT_RESPONSE",
	3: "EVENT_HANGUP",
}

var EventType_value = map[string]int32{
	"EVENT_KEEPALIVE": 0,
	"EVENT_REQUEST":   1,
	"EVENT_RESPONSE":  2,
	"EVENT_HANGUP":    3,
}

func (x EventType) String() string {
	return proto.EnumName(EventType_name, int32(x))
}

func (EventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e3ca473659fceec7, []int{0}
}

type TransportHandshakeHeader struct {
	Id                    UUID  `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	MaxIncomingPacketSize int32 `protobuf:"varint,2,opt,name=max_incoming_packet_size,json=maxIncomingPacketSize,proto3" json:"max_incoming_packet_size,omitempty"`
	MaxOutgoingPacketSize int32 `protobuf:"varint,3,opt,name=max_outgoing_packet_size,json=maxOutgoingPacketSize,proto3" json:"max_outgoing_packet_size,omitempty"`
}

func (m *TransportHandshakeHeader) Reset()         { *m = TransportHandshakeHeader{} }
func (m *TransportHandshakeHeader) String() string { return proto.CompactTextString(m) }
func (*TransportHandshakeHeader) ProtoMessage()    {}
func (*TransportHandshakeHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ca473659fceec7, []int{0}
}
func (m *TransportHandshakeHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransportHandshakeHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransportHandshakeHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransportHandshakeHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransportHandshakeHeader.Merge(m, src)
}
func (m *TransportHandshakeHeader) XXX_Size() int {
	return m.Size()
}
func (m *TransportHandshakeHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_TransportHandshakeHeader.DiscardUnknown(m)
}

var xxx_messageInfo_TransportHandshakeHeader proto.InternalMessageInfo

func (m *TransportHandshakeHeader) GetId() UUID {
	if m != nil {
		return m.Id
	}
	return UUID{}
}

func (m *TransportHandshakeHeader) GetMaxIncomingPacketSize() int32 {
	if m != nil {
		return m.MaxIncomingPacketSize
	}
	return 0
}

func (m *TransportHandshakeHeader) GetMaxOutgoingPacketSize() int32 {
	if m != nil {
		return m.MaxOutgoingPacketSize
	}
	return 0
}

type PacketHeader struct {
	EventType EventType `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=gogorpc.proto.EventType" json:"event_type,omitempty"`
}

func (m *PacketHeader) Reset()         { *m = PacketHeader{} }
func (m *PacketHeader) String() string { return proto.CompactTextString(m) }
func (*PacketHeader) ProtoMessage()    {}
func (*PacketHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ca473659fceec7, []int{1}
}
func (m *PacketHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PacketHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PacketHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PacketHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacketHeader.Merge(m, src)
}
func (m *PacketHeader) XXX_Size() int {
	return m.Size()
}
func (m *PacketHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_PacketHeader.DiscardUnknown(m)
}

var xxx_messageInfo_PacketHeader proto.InternalMessageInfo

func (m *PacketHeader) GetEventType() EventType {
	if m != nil {
		return m.EventType
	}
	return EVENT_KEEPALIVE
}

func init() {
	proto.RegisterEnum("gogorpc.proto.EventType", EventType_name, EventType_value)
	proto.RegisterType((*TransportHandshakeHeader)(nil), "gogorpc.proto.TransportHandshakeHeader")
	proto.RegisterType((*PacketHeader)(nil), "gogorpc.proto.PacketHeader")
}

func init() {
	proto.RegisterFile("github.com/let-z-go/gogorpc/internal/proto/transport.proto", fileDescriptor_e3ca473659fceec7)
}

var fileDescriptor_e3ca473659fceec7 = []byte{
	// 387 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0x4f, 0x8b, 0xd3, 0x40,
	0x18, 0xc6, 0x33, 0x59, 0x15, 0x76, 0xdc, 0x5d, 0xe3, 0x2c, 0x42, 0xf0, 0x10, 0x97, 0x9e, 0x6a,
	0xa1, 0x09, 0x54, 0xa4, 0xe0, 0xad, 0xc5, 0xa1, 0x29, 0x4a, 0x1b, 0xf3, 0xa7, 0xa0, 0x97, 0x30,
	0x4d, 0xc6, 0x74, 0x68, 0x93, 0x09, 0xe9, 0x44, 0xda, 0x7e, 0x0a, 0xbf, 0x8d, 0x5f, 0xa1, 0xc7,
	0x1e, 0x3d, 0x89, 0xb6, 0x5f, 0x44, 0x9a, 0x3f, 0x55, 0x7b, 0x72, 0x4f, 0x79, 0x9f, 0xe7, 0x79,
	0x7f, 0x6f, 0x1e, 0x18, 0xf8, 0x26, 0x62, 0x62, 0x96, 0x4f, 0xf5, 0x80, 0xc7, 0xc6, 0x82, 0x8a,
	0xf6, 0xa6, 0x1d, 0x71, 0x23, 0xe2, 0x11, 0xcf, 0xd2, 0xc0, 0x60, 0x89, 0xa0, 0x59, 0x42, 0x16,
	0x46, 0x9a, 0x71, 0xc1, 0x0d, 0x91, 0x91, 0x64, 0x99, 0xf2, 0x4c, 0xe8, 0x85, 0x46, 0xd7, 0xd5,
	0x5e, 0x29, 0x9f, 0xb7, 0xff, 0x3a, 0x75, 0x4c, 0x4a, 0x6a, 0x9a, 0x7f, 0x2e, 0x54, 0x79, 0xe2,
	0x38, 0x55, 0xeb, 0xaf, 0xef, 0xf1, 0xe7, 0x3c, 0x67, 0x61, 0x89, 0x35, 0xbe, 0x01, 0xa8, 0xba,
	0x75, 0x11, 0x93, 0x24, 0xe1, 0x72, 0x46, 0xe6, 0xd4, 0xa4, 0x24, 0xa4, 0x19, 0x7a, 0x09, 0x65,
	0x16, 0xaa, 0xe0, 0x0e, 0x34, 0x1f, 0x77, 0x6e, 0xf5, 0x7f, 0xea, 0xe9, 0x9e, 0x37, 0x7c, 0xdb,
	0x7f, 0xb0, 0xfd, 0xf1, 0x42, 0xb2, 0x65, 0x16, 0xa2, 0x2e, 0x54, 0x63, 0xb2, 0xf2, 0x59, 0x12,
	0xf0, 0x98, 0x25, 0x91, 0x9f, 0x92, 0x60, 0x4e, 0x85, 0xbf, 0x64, 0x1b, 0xaa, 0xca, 0x77, 0xa0,
	0xf9, 0xd0, 0x7e, 0x16, 0x93, 0xd5, 0xb0, 0x8a, 0xad, 0x22, 0x75, 0xd8, 0x86, 0xd6, 0x20, 0xcf,
	0x45, 0xc4, 0xcf, 0xc1, 0x8b, 0x13, 0x38, 0xae, 0xe2, 0x3f, 0x60, 0x63, 0x00, 0xaf, 0x4a, 0x55,
	0x95, 0xed, 0x42, 0x48, 0xbf, 0xd0, 0x44, 0xf8, 0x62, 0x9d, 0xd2, 0xa2, 0xf4, 0x4d, 0x47, 0x3d,
	0x2b, 0x8d, 0x8f, 0x0b, 0xee, 0x3a, 0xa5, 0xf6, 0x25, 0xad, 0xc7, 0xd6, 0x47, 0x78, 0x79, 0xf2,
	0xd1, 0x2d, 0x7c, 0x82, 0x27, 0x78, 0xe4, 0xfa, 0xef, 0x30, 0xb6, 0x7a, 0xef, 0x87, 0x13, 0xac,
	0x48, 0xe8, 0x29, 0xbc, 0x2e, 0x4d, 0x1b, 0x7f, 0xf0, 0xb0, 0xe3, 0x2a, 0x00, 0x21, 0x78, 0x53,
	0x5b, 0x8e, 0x35, 0x1e, 0x39, 0x58, 0x91, 0x91, 0x02, 0xaf, 0x4a, 0xcf, 0xec, 0x8d, 0x06, 0x9e,
	0xa5, 0x5c, 0xf4, 0xcd, 0xdd, 0x2f, 0x4d, 0xda, 0xee, 0x35, 0xb0, 0xdb, 0x6b, 0xe0, 0xe7, 0x5e,
	0x03, 0x5f, 0x0f, 0x9a, 0xb4, 0x3b, 0x68, 0xd2, 0xf7, 0x83, 0x26, 0x7d, 0x6a, 0xfd, 0xff, 0x93,
	0x4d, 0x1f, 0x15, 0x9f, 0x57, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x0e, 0x78, 0xd5, 0x68, 0x61,
	0x02, 0x00, 0x00,
}

func (m *TransportHandshakeHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransportHandshakeHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransportHandshakeHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxOutgoingPacketSize != 0 {
		i = encodeVarintTransport(dAtA, i, uint64(m.MaxOutgoingPacketSize))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxIncomingPacketSize != 0 {
		i = encodeVarintTransport(dAtA, i, uint64(m.MaxIncomingPacketSize))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTransport(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PacketHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PacketHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PacketHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EventType != 0 {
		i = encodeVarintTransport(dAtA, i, uint64(m.EventType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTransport(dAtA []byte, offset int, v uint64) int {
	offset -= sovTransport(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TransportHandshakeHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Id.Size()
	n += 1 + l + sovTransport(uint64(l))
	if m.MaxIncomingPacketSize != 0 {
		n += 1 + sovTransport(uint64(m.MaxIncomingPacketSize))
	}
	if m.MaxOutgoingPacketSize != 0 {
		n += 1 + sovTransport(uint64(m.MaxOutgoingPacketSize))
	}
	return n
}

func (m *PacketHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventType != 0 {
		n += 1 + sovTransport(uint64(m.EventType))
	}
	return n
}

func sovTransport(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTransport(x uint64) (n int) {
	return sovTransport(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TransportHandshakeHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransportHandshakeHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransportHandshakeHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransport
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxIncomingPacketSize", wireType)
			}
			m.MaxIncomingPacketSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxIncomingPacketSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxOutgoingPacketSize", wireType)
			}
			m.MaxOutgoingPacketSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxOutgoingPacketSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTransport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransport
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTransport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PacketHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PacketHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PacketHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= EventType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTransport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransport
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTransport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTransport(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTransport
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTransport
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTransport
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTransport
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTransport        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTransport          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTransport = fmt.Errorf("proto: unexpected end of group")
)
