// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protocol/transport.proto

package protocol

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type MessageType int32

const (
	MESSAGE_KEEPALIVE MessageType = 0
	MESSAGE_REQUEST   MessageType = 1
	MESSAGE_RESPONSE  MessageType = 2
	MESSAGE_HANGUP    MessageType = 3
)

var MessageType_name = map[int32]string{
	0: "MESSAGE_KEEPALIVE",
	1: "MESSAGE_REQUEST",
	2: "MESSAGE_RESPONSE",
	3: "MESSAGE_HANGUP",
}

var MessageType_value = map[string]int32{
	"MESSAGE_KEEPALIVE": 0,
	"MESSAGE_REQUEST":   1,
	"MESSAGE_RESPONSE":  2,
	"MESSAGE_HANGUP":    3,
}

func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}

func (MessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_32f8dabe690e614a, []int{0}
}

type TransportHandshakeHeader struct {
	Id                    UUID  `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	MaxIncomingPacketSize int32 `protobuf:"varint,2,opt,name=max_incoming_packet_size,json=maxIncomingPacketSize,proto3" json:"max_incoming_packet_size,omitempty"`
	MaxOutgoingPacketSize int32 `protobuf:"varint,3,opt,name=max_outgoing_packet_size,json=maxOutgoingPacketSize,proto3" json:"max_outgoing_packet_size,omitempty"`
}

func (m *TransportHandshakeHeader) Reset()         { *m = TransportHandshakeHeader{} }
func (m *TransportHandshakeHeader) String() string { return proto.CompactTextString(m) }
func (*TransportHandshakeHeader) ProtoMessage()    {}
func (*TransportHandshakeHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f8dabe690e614a, []int{0}
}
func (m *TransportHandshakeHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransportHandshakeHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransportHandshakeHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransportHandshakeHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransportHandshakeHeader.Merge(m, src)
}
func (m *TransportHandshakeHeader) XXX_Size() int {
	return m.Size()
}
func (m *TransportHandshakeHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_TransportHandshakeHeader.DiscardUnknown(m)
}

var xxx_messageInfo_TransportHandshakeHeader proto.InternalMessageInfo

func (m *TransportHandshakeHeader) GetId() UUID {
	if m != nil {
		return m.Id
	}
	return UUID{}
}

func (m *TransportHandshakeHeader) GetMaxIncomingPacketSize() int32 {
	if m != nil {
		return m.MaxIncomingPacketSize
	}
	return 0
}

func (m *TransportHandshakeHeader) GetMaxOutgoingPacketSize() int32 {
	if m != nil {
		return m.MaxOutgoingPacketSize
	}
	return 0
}

type PacketHeader struct {
	MessageType MessageType `protobuf:"varint,1,opt,name=message_type,json=messageType,proto3,enum=pbrpc.protocol.MessageType" json:"message_type,omitempty"`
}

func (m *PacketHeader) Reset()         { *m = PacketHeader{} }
func (m *PacketHeader) String() string { return proto.CompactTextString(m) }
func (*PacketHeader) ProtoMessage()    {}
func (*PacketHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_32f8dabe690e614a, []int{1}
}
func (m *PacketHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PacketHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PacketHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PacketHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacketHeader.Merge(m, src)
}
func (m *PacketHeader) XXX_Size() int {
	return m.Size()
}
func (m *PacketHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_PacketHeader.DiscardUnknown(m)
}

var xxx_messageInfo_PacketHeader proto.InternalMessageInfo

func (m *PacketHeader) GetMessageType() MessageType {
	if m != nil {
		return m.MessageType
	}
	return MESSAGE_KEEPALIVE
}

func init() {
	proto.RegisterEnum("pbrpc.protocol.MessageType", MessageType_name, MessageType_value)
	proto.RegisterType((*TransportHandshakeHeader)(nil), "pbrpc.protocol.TransportHandshakeHeader")
	proto.RegisterType((*PacketHeader)(nil), "pbrpc.protocol.PacketHeader")
}

func init() { proto.RegisterFile("protocol/transport.proto", fileDescriptor_32f8dabe690e614a) }

var fileDescriptor_32f8dabe690e614a = []byte{
	// 394 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0xc1, 0x8a, 0xd3, 0x40,
	0x1c, 0xc6, 0x33, 0x59, 0xf5, 0x30, 0x5d, 0x6a, 0x1c, 0x77, 0x21, 0xac, 0x10, 0x97, 0x3d, 0x2d,
	0x2b, 0x4d, 0x60, 0x05, 0xbd, 0x09, 0x5d, 0x1c, 0xb6, 0x41, 0xb7, 0x8d, 0x49, 0xe3, 0xc1, 0x4b,
	0x98, 0x24, 0x63, 0x3a, 0xb4, 0xc9, 0x84, 0x64, 0x02, 0x6d, 0x9f, 0xc2, 0xc7, 0xf1, 0x11, 0x7a,
	0xec, 0xd1, 0x93, 0x68, 0xfb, 0x22, 0xd2, 0x49, 0xd3, 0xd6, 0xde, 0xf6, 0xf6, 0xff, 0xbe, 0xef,
	0xff, 0x9b, 0xf9, 0xe0, 0x0f, 0xf5, 0xbc, 0xe0, 0x82, 0x47, 0x7c, 0x62, 0x89, 0x82, 0x64, 0x65,
	0xce, 0x0b, 0x61, 0x4a, 0x0b, 0xb5, 0xf3, 0xb0, 0xc8, 0x23, 0xb3, 0xc9, 0x2f, 0x3a, 0x09, 0x13,
	0xa3, 0x2a, 0x34, 0x23, 0x9e, 0x5a, 0x09, 0x4f, 0xb8, 0x25, 0x93, 0xb0, 0xfa, 0x2e, 0x95, 0x14,
	0x72, 0xaa, 0x89, 0x8b, 0x77, 0x07, 0xeb, 0x13, 0x2a, 0x3a, 0xf3, 0xce, 0x06, 0xd9, 0x3c, 0x69,
	0xb1, 0x4c, 0xd0, 0x22, 0x23, 0x13, 0x6b, 0xf7, 0x77, 0x55, 0xb1, 0xb8, 0xe6, 0xae, 0x7e, 0x02,
	0xa8, 0x0f, 0x9b, 0x2a, 0x3d, 0x92, 0xc5, 0xe5, 0x88, 0x8c, 0x69, 0x8f, 0x92, 0x98, 0x16, 0xe8,
	0x06, 0xaa, 0x2c, 0xd6, 0xc1, 0x25, 0xb8, 0x6e, 0xdd, 0x9e, 0x99, 0xff, 0x17, 0x34, 0x7d, 0xdf,
	0xfe, 0x78, 0xf7, 0x64, 0xf1, 0xfb, 0xb5, 0xe2, 0xaa, 0x2c, 0x46, 0xef, 0xa1, 0x9e, 0x92, 0x69,
	0xc0, 0xb2, 0x88, 0xa7, 0x2c, 0x4b, 0x82, 0x9c, 0x44, 0x63, 0x2a, 0x82, 0x92, 0xcd, 0xa9, 0xae,
	0x5e, 0x82, 0xeb, 0xa7, 0xee, 0x79, 0x4a, 0xa6, 0xf6, 0x36, 0x76, 0x64, 0xea, 0xb1, 0x39, 0x6d,
	0x40, 0x5e, 0x89, 0x84, 0x1f, 0x83, 0x27, 0x3b, 0x70, 0xb0, 0x8d, 0xf7, 0xe0, 0x55, 0x1f, 0x9e,
	0xd6, 0x6a, 0xdb, 0xf6, 0x03, 0x3c, 0x4d, 0x69, 0x59, 0x92, 0x84, 0x06, 0x62, 0x96, 0x53, 0xd9,
	0xbb, 0x7d, 0xfb, 0xea, 0xb8, 0xf7, 0x43, 0xbd, 0x33, 0x9c, 0xe5, 0xd4, 0x6d, 0xa5, 0x7b, 0x71,
	0x13, 0xc1, 0xd6, 0x41, 0x86, 0xce, 0xe1, 0x8b, 0x07, 0xec, 0x79, 0xdd, 0x7b, 0x1c, 0x7c, 0xc2,
	0xd8, 0xe9, 0x7e, 0xb6, 0xbf, 0x62, 0x4d, 0x41, 0x2f, 0xe1, 0xf3, 0xc6, 0x76, 0xf1, 0x17, 0x1f,
	0x7b, 0x43, 0x0d, 0xa0, 0x33, 0xa8, 0xed, 0x4d, 0xcf, 0x19, 0xf4, 0x3d, 0xac, 0xa9, 0x08, 0xc1,
	0x76, 0xe3, 0xf6, 0xba, 0xfd, 0x7b, 0xdf, 0xd1, 0x4e, 0xee, 0xec, 0xe5, 0x5f, 0x43, 0x59, 0xac,
	0x0c, 0xb0, 0x5c, 0x19, 0xe0, 0xcf, 0xca, 0x00, 0x3f, 0xd6, 0x86, 0xb2, 0x5c, 0x1b, 0xca, 0xaf,
	0xb5, 0xa1, 0x7c, 0x7b, 0xf3, 0x88, 0x2b, 0x86, 0xcf, 0xe4, 0xf4, 0xf6, 0x5f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x60, 0xf0, 0x74, 0x9a, 0x54, 0x02, 0x00, 0x00,
}

func (m *TransportHandshakeHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransportHandshakeHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintTransport(dAtA, i, uint64(m.Id.Size()))
	n1, err1 := m.Id.MarshalTo(dAtA[i:])
	if err1 != nil {
		return 0, err1
	}
	i += n1
	if m.MaxIncomingPacketSize != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTransport(dAtA, i, uint64(m.MaxIncomingPacketSize))
	}
	if m.MaxOutgoingPacketSize != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTransport(dAtA, i, uint64(m.MaxOutgoingPacketSize))
	}
	return i, nil
}

func (m *PacketHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PacketHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MessageType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTransport(dAtA, i, uint64(m.MessageType))
	}
	return i, nil
}

func encodeVarintTransport(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TransportHandshakeHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Id.Size()
	n += 1 + l + sovTransport(uint64(l))
	if m.MaxIncomingPacketSize != 0 {
		n += 1 + sovTransport(uint64(m.MaxIncomingPacketSize))
	}
	if m.MaxOutgoingPacketSize != 0 {
		n += 1 + sovTransport(uint64(m.MaxOutgoingPacketSize))
	}
	return n
}

func (m *PacketHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MessageType != 0 {
		n += 1 + sovTransport(uint64(m.MessageType))
	}
	return n
}

func sovTransport(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTransport(x uint64) (n int) {
	return sovTransport(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TransportHandshakeHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransportHandshakeHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransportHandshakeHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransport
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxIncomingPacketSize", wireType)
			}
			m.MaxIncomingPacketSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxIncomingPacketSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxOutgoingPacketSize", wireType)
			}
			m.MaxOutgoingPacketSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxOutgoingPacketSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTransport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransport
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTransport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PacketHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PacketHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PacketHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageType", wireType)
			}
			m.MessageType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageType |= MessageType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTransport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransport
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTransport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTransport(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTransport
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTransport
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthTransport
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTransport
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTransport(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthTransport
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTransport = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTransport   = fmt.Errorf("proto: integer overflow")
)
