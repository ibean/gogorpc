/*
 * Generated by Aspector. DO NOT EDIT!
 */

package protocol

import (
	context "context"
	channel "github.com/let-z-go/pbrpc/channel"
)

var (
	ErrRPCForbiddenName = channel.NewRPCError(channel.RPCErrorCode(403), "examples.helloworld.ForbiddenName")
)

const Greeter = "examples.helloworld.Greeter"

const (
	Greeter_SayHello = "SayHello"
)

type GreeterHandler interface {
	SayHello(ctx context.Context, request *SayHelloReq) (response *SayHelloResp, err error)
}

func RegisterGreeterHandler(serviceHandler GreeterHandler) func(*channel.Options) {
	return func(options *channel.Options) {
		options.
			BuildMethod(Greeter, Greeter_SayHello).
			SetRequestFactory(func() channel.Message {
				return new(SayHelloReq)
			}).
			SetIncomingRPCHandler(func(rpc *channel.RPC) {
				response, err := serviceHandler.SayHello(rpc.Ctx, rpc.Request.(*SayHelloReq))

				if response == nil {
					rpc.Response = channel.NullMessage
				} else {
					rpc.Response = response
				}

				rpc.Err = err
			}).
			End()
	}
}

type GreeterStub struct {
	rpcPreparer channel.RPCPreparer
}

func (self GreeterStub) SayHello(ctx context.Context, request *SayHelloReq) *GreeterStub_SayHello {
	rpc := GreeterStub_SayHello{inner: channel.RPC{
		Ctx:         ctx,
		ServiceName: Greeter,
		MethodName:  Greeter_SayHello,
		Request:     request,
	}}

	self.rpcPreparer.PrepareRPC(&rpc.inner, func() channel.Message {
		return new(SayHelloResp)
	})

	return &rpc
}

func MakeGreeterStub(rpcPreparer channel.RPCPreparer) GreeterStub {
	return GreeterStub{rpcPreparer}
}

type GreeterStub_SayHello struct {
	inner channel.RPC
}

func (self *GreeterStub_SayHello) WithRequestMetadata(metadata channel.Metadata) *GreeterStub_SayHello {
	self.inner.RequestMetadata = metadata
	return self
}

func (self *GreeterStub_SayHello) Invoke() (*SayHelloResp, error) {
	if self.inner.IsHandled() {
		self.inner.Reprepare()
	}

	self.inner.Handle()

	if self.inner.Err != nil {
		return nil, self.inner.Err
	}

	return self.inner.Response.(*SayHelloResp), nil
}

func (self *GreeterStub_SayHello) ResponseMetadata() channel.Metadata {
	return self.inner.ResponseMetadata
}
