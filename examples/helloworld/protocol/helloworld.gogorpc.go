/*
 * Generated by protoc-gen-gogorpc. DO NOT EDIT!
 */

package protocol

import (
	context "context"
	channel "github.com/let-z-go/gogorpc/channel"
)

var (
	RPCErrForbiddenName = channel.NewRPCError(channel.RPCErrorType(403), "examples.helloworld.ForbiddenName")
)

const Greeter = "examples.helloworld.Greeter"

const (
	Greeter_SayHello  = "SayHello"
	Greeter_SayHello2 = "SayHello2"
	Greeter_SayHello3 = "SayHello3"
)

type GreeterHandler interface {
	SayHello(ctx context.Context, request *SayHelloReq) (response *SayHelloResp, err error)
	SayHello2(ctx context.Context, request *SayHelloReq) (err error)
	SayHello3(ctx context.Context) (response *SayHelloResp, err error)
}

func RegisterGreeterHandler(serviceHandler GreeterHandler) func(*channel.Options) {
	return func(options *channel.Options) {
		options.
			BuildMethod(Greeter, Greeter_SayHello).
			SetRequestFactory(func() channel.Message {
				return new(SayHelloReq)
			}).
			SetIncomingRPCHandler(func(rpc *channel.RPC) {
				response, err := serviceHandler.SayHello(rpc.Ctx, rpc.Request.(*SayHelloReq))

				if response == nil {
					rpc.Response = channel.NullMessage
				} else {
					rpc.Response = response
				}

				rpc.Err = err
			}).
			End().
			BuildMethod(Greeter, Greeter_SayHello2).
			SetRequestFactory(func() channel.Message {
				return new(SayHelloReq)
			}).
			SetIncomingRPCHandler(func(rpc *channel.RPC) {
				rpc.Response = channel.NullMessage
				rpc.Err = serviceHandler.SayHello2(rpc.Ctx, rpc.Request.(*SayHelloReq))
			}).
			End().
			BuildMethod(Greeter, Greeter_SayHello3).
			SetIncomingRPCHandler(func(rpc *channel.RPC) {
				response, err := serviceHandler.SayHello3(rpc.Ctx)

				if response == nil {
					rpc.Response = channel.NullMessage
				} else {
					rpc.Response = response
				}

				rpc.Err = err
			}).
			End()
	}
}

type GreeterStub struct {
	rpcPreparer     channel.RPCPreparer
	requestMetadata channel.Metadata
}

func (self *GreeterStub) Init(rpcPreparer channel.RPCPreparer) *GreeterStub {
	self.rpcPreparer = rpcPreparer
	return self
}

func (self *GreeterStub) WithRequestMetadata(metadata channel.Metadata) *GreeterStub {
	self.requestMetadata = metadata
	return self
}

func (self GreeterStub) SayHello(ctx context.Context, request *SayHelloReq) (*SayHelloResp, error) {
	rpc := channel.GetPooledRPC()

	*rpc = channel.RPC{
		Ctx:             ctx,
		ServiceID:       Greeter,
		MethodName:      Greeter_SayHello,
		RequestMetadata: self.requestMetadata,
		Request:         request,
	}

	self.rpcPreparer.PrepareRPC(rpc, func() channel.Message {
		return new(SayHelloResp)
	})

	rpc.Handle()
	response, err := rpc.Response, rpc.Err
	channel.PutPooledRPC(rpc)

	if err != nil {
		return nil, err
	}

	return response.(*SayHelloResp), nil
}

func (self GreeterStub) MakeSayHello(ctx context.Context, request *SayHelloReq) GreeterStub_SayHello {
	rpc := channel.GetPooledRPC()

	*rpc = channel.RPC{
		Ctx:             ctx,
		ServiceID:       Greeter,
		MethodName:      Greeter_SayHello,
		RequestMetadata: self.requestMetadata,
		Request:         request,
	}

	self.rpcPreparer.PrepareRPC(rpc, func() channel.Message {
		return new(SayHelloResp)
	})

	return GreeterStub_SayHello{rpc}
}

func (self GreeterStub) SayHello2(ctx context.Context, request *SayHelloReq) error {
	rpc := channel.GetPooledRPC()

	*rpc = channel.RPC{
		Ctx:             ctx,
		ServiceID:       Greeter,
		MethodName:      Greeter_SayHello2,
		RequestMetadata: self.requestMetadata,
		Request:         request,
	}

	self.rpcPreparer.PrepareRPC(rpc, channel.GetNullMessage)
	rpc.Handle()
	err := rpc.Err
	channel.PutPooledRPC(rpc)
	return err
}

func (self GreeterStub) MakeSayHello2(ctx context.Context, request *SayHelloReq) GreeterStub_SayHello2 {
	rpc := channel.GetPooledRPC()

	*rpc = channel.RPC{
		Ctx:             ctx,
		ServiceID:       Greeter,
		MethodName:      Greeter_SayHello2,
		RequestMetadata: self.requestMetadata,
		Request:         request,
	}

	self.rpcPreparer.PrepareRPC(rpc, channel.GetNullMessage)
	return GreeterStub_SayHello2{rpc}
}

func (self GreeterStub) SayHello3(ctx context.Context) (*SayHelloResp, error) {
	rpc := channel.GetPooledRPC()

	*rpc = channel.RPC{
		Ctx:             ctx,
		ServiceID:       Greeter,
		MethodName:      Greeter_SayHello3,
		RequestMetadata: self.requestMetadata,
	}

	self.rpcPreparer.PrepareRPC(rpc, func() channel.Message {
		return new(SayHelloResp)
	})

	rpc.Handle()
	response, err := rpc.Response, rpc.Err
	channel.PutPooledRPC(rpc)

	if err != nil {
		return nil, err
	}

	return response.(*SayHelloResp), nil
}

func (self GreeterStub) MakeSayHello3(ctx context.Context) GreeterStub_SayHello3 {
	rpc := channel.GetPooledRPC()

	*rpc = channel.RPC{
		Ctx:             ctx,
		ServiceID:       Greeter,
		MethodName:      Greeter_SayHello3,
		RequestMetadata: self.requestMetadata,
	}

	self.rpcPreparer.PrepareRPC(rpc, func() channel.Message {
		return new(SayHelloResp)
	})

	return GreeterStub_SayHello3{rpc}
}

type GreeterStub_SayHello struct {
	rpc *channel.RPC
}

func (self GreeterStub_SayHello) WithRequestMetadata(metadata channel.Metadata) GreeterStub_SayHello {
	self.rpc.RequestMetadata = metadata
	return self
}

func (self GreeterStub_SayHello) Invoke() (*SayHelloResp, error) {
	if self.rpc.IsHandled() {
		self.rpc.Reprepare()
	}

	self.rpc.Handle()

	if self.rpc.Err != nil {
		return nil, self.rpc.Err
	}

	return self.rpc.Response.(*SayHelloResp), nil
}

func (self GreeterStub_SayHello) ResponseMetadata() channel.Metadata {
	return self.rpc.ResponseMetadata
}

func (self GreeterStub_SayHello) Close() {
	channel.PutPooledRPC(self.rpc)
	self.rpc = nil
}

type GreeterStub_SayHello2 struct {
	rpc *channel.RPC
}

func (self GreeterStub_SayHello2) WithRequestMetadata(metadata channel.Metadata) GreeterStub_SayHello2 {
	self.rpc.RequestMetadata = metadata
	return self
}

func (self GreeterStub_SayHello2) Invoke() error {
	if self.rpc.IsHandled() {
		self.rpc.Reprepare()
	}

	self.rpc.Handle()
	return self.rpc.Err
}

func (self GreeterStub_SayHello2) ResponseMetadata() channel.Metadata {
	return self.rpc.ResponseMetadata
}

func (self GreeterStub_SayHello2) Close() {
	channel.PutPooledRPC(self.rpc)
	self.rpc = nil
}

type GreeterStub_SayHello3 struct {
	rpc *channel.RPC
}

func (self GreeterStub_SayHello3) WithRequestMetadata(metadata channel.Metadata) GreeterStub_SayHello3 {
	self.rpc.RequestMetadata = metadata
	return self
}

func (self GreeterStub_SayHello3) Invoke() (*SayHelloResp, error) {
	if self.rpc.IsHandled() {
		self.rpc.Reprepare()
	}

	self.rpc.Handle()

	if self.rpc.Err != nil {
		return nil, self.rpc.Err
	}

	return self.rpc.Response.(*SayHelloResp), nil
}

func (self GreeterStub_SayHello3) ResponseMetadata() channel.Metadata {
	return self.rpc.ResponseMetadata
}

func (self GreeterStub_SayHello3) Close() {
	channel.PutPooledRPC(self.rpc)
	self.rpc = nil
}
