/*
 * Generated by protoc-gen-gogorpc. DO NOT EDIT!
 */

package proto

import (
	context "context"
	channel "github.com/let-z-go/gogorpc/channel"
)

var (
	RPCErrForbiddenName = channel.NewRPCError(channel.RPCErrorType(403), "examples.helloworld.ForbiddenName")
)

const ServiceGreeter = "examples.helloworld.Greeter"

const (
	Greeter_SayHello  = "SayHello"
	Greeter_SayHello2 = "SayHello2"
	Greeter_SayHello3 = "SayHello3"
)

type Greeter interface {
	SayHello(ctx context.Context, request *SayHelloReq) (response *SayHelloResp, err error)
	SayHello2(ctx context.Context, request *SayHelloReq) (err error)
	SayHello3(ctx context.Context) (response *SayHelloResp, err error)
}

func ImplementGreeter(service Greeter) func(*channel.Options) {
	return func(options *channel.Options) {
		options.
			BuildMethod(ServiceGreeter, Greeter_SayHello).
			SetRequestFactory(Greeter_NewSayHelloRequest).
			SetIncomingRPCHandler(func(rpc *channel.RPC) {
				response, err := service.SayHello(rpc.Ctx, rpc.Request.(*SayHelloReq))

				if response == nil {
					rpc.Response = channel.NullMessage
				} else {
					rpc.Response = response
				}

				rpc.Err = err
			}).
			End().
			BuildMethod(ServiceGreeter, Greeter_SayHello2).
			SetRequestFactory(Greeter_NewSayHello2Request).
			SetIncomingRPCHandler(func(rpc *channel.RPC) {
				rpc.Response = channel.NullMessage
				rpc.Err = service.SayHello2(rpc.Ctx, rpc.Request.(*SayHelloReq))
			}).
			End().
			BuildMethod(ServiceGreeter, Greeter_SayHello3).
			SetIncomingRPCHandler(func(rpc *channel.RPC) {
				response, err := service.SayHello3(rpc.Ctx)

				if response == nil {
					rpc.Response = channel.NullMessage
				} else {
					rpc.Response = response
				}

				rpc.Err = err
			}).
			End()
	}
}

type GreeterStub struct {
	rpcPreparer      channel.RPCPreparer
	requestExtraData channel.ExtraData
}

var _ = Greeter(GreeterStub{})

func (self *GreeterStub) Init(rpcPreparer channel.RPCPreparer) *GreeterStub {
	self.rpcPreparer = rpcPreparer
	return self
}

func (self *GreeterStub) WithRequestExtraData(extraData channel.ExtraData) *GreeterStub {
	self.requestExtraData = extraData
	return self
}

func (self GreeterStub) SayHello(ctx context.Context, request *SayHelloReq) (*SayHelloResp, error) {
	rpc := self.MakeSayHelloRPC(ctx, request).Do()
	response, err := rpc.Result()
	rpc.Close()
	return response, err
}

func (self GreeterStub) MakeSayHelloRPC(ctx context.Context, request *SayHelloReq) Greeter_SayHelloRPC {
	rpc := channel.GetPooledRPC()

	*rpc = channel.RPC{
		Ctx:              ctx,
		ServiceName:      ServiceGreeter,
		MethodName:       Greeter_SayHello,
		RequestExtraData: self.requestExtraData.Ref(true),
		Request:          request,
	}

	self.rpcPreparer.PrepareRPC(rpc, Greeter_NewSayHelloResponse)
	return Greeter_SayHelloRPC{rpc}
}

func (self GreeterStub) SayHello2(ctx context.Context, request *SayHelloReq) error {
	rpc := self.MakeSayHello2RPC(ctx, request).Do()
	err := rpc.Result()
	rpc.Close()
	return err
}

func (self GreeterStub) MakeSayHello2RPC(ctx context.Context, request *SayHelloReq) Greeter_SayHello2RPC {
	rpc := channel.GetPooledRPC()

	*rpc = channel.RPC{
		Ctx:              ctx,
		ServiceName:      ServiceGreeter,
		MethodName:       Greeter_SayHello2,
		RequestExtraData: self.requestExtraData.Ref(true),
		Request:          request,
	}

	self.rpcPreparer.PrepareRPC(rpc, channel.GetNullMessage)
	return Greeter_SayHello2RPC{rpc}
}

func (self GreeterStub) SayHello3(ctx context.Context) (*SayHelloResp, error) {
	rpc := self.MakeSayHello3RPC(ctx).Do()
	response, err := rpc.Result()
	rpc.Close()
	return response, err
}

func (self GreeterStub) MakeSayHello3RPC(ctx context.Context) Greeter_SayHello3RPC {
	rpc := channel.GetPooledRPC()

	*rpc = channel.RPC{
		Ctx:              ctx,
		ServiceName:      ServiceGreeter,
		MethodName:       Greeter_SayHello3,
		RequestExtraData: self.requestExtraData.Ref(true),
	}

	self.rpcPreparer.PrepareRPC(rpc, Greeter_NewSayHello3Response)
	return Greeter_SayHello3RPC{rpc}
}

type Greeter_SayHelloRPC struct {
	underlying *channel.RPC
}

func (self Greeter_SayHelloRPC) WithRequestExtraData(extraData channel.ExtraDataRef) Greeter_SayHelloRPC {
	self.underlying.RequestExtraData = extraData
	return self
}

func (self Greeter_SayHelloRPC) Do() Greeter_SayHelloRPC {
	if self.underlying.IsHandled() {
		self.underlying.Reprepare()
	}

	self.underlying.Handle()
	return self
}

func (self Greeter_SayHelloRPC) Result() (*SayHelloResp, error) {
	if self.underlying.Err != nil {
		return nil, self.underlying.Err
	}

	return self.underlying.Response.(*SayHelloResp), nil
}

func (self Greeter_SayHelloRPC) Close() {
	channel.PutPooledRPC(self.underlying)
	self.underlying = nil
}

func (self Greeter_SayHelloRPC) RequestExtraData() channel.ExtraDataRef {
	return self.underlying.RequestExtraData
}

func (self Greeter_SayHelloRPC) ResponseExtraData() channel.ExtraDataRef {
	return self.underlying.ResponseExtraData
}

type Greeter_SayHello2RPC struct {
	underlying *channel.RPC
}

func (self Greeter_SayHello2RPC) WithRequestExtraData(extraData channel.ExtraDataRef) Greeter_SayHello2RPC {
	self.underlying.RequestExtraData = extraData
	return self
}

func (self Greeter_SayHello2RPC) Do() Greeter_SayHello2RPC {
	if self.underlying.IsHandled() {
		self.underlying.Reprepare()
	}

	self.underlying.Handle()
	return self
}

func (self Greeter_SayHello2RPC) Result() error {
	return self.underlying.Err
}

func (self Greeter_SayHello2RPC) Close() {
	channel.PutPooledRPC(self.underlying)
	self.underlying = nil
}

func (self Greeter_SayHello2RPC) RequestExtraData() channel.ExtraDataRef {
	return self.underlying.RequestExtraData
}

func (self Greeter_SayHello2RPC) ResponseExtraData() channel.ExtraDataRef {
	return self.underlying.ResponseExtraData
}

type Greeter_SayHello3RPC struct {
	underlying *channel.RPC
}

func (self Greeter_SayHello3RPC) WithRequestExtraData(extraData channel.ExtraDataRef) Greeter_SayHello3RPC {
	self.underlying.RequestExtraData = extraData
	return self
}

func (self Greeter_SayHello3RPC) Do() Greeter_SayHello3RPC {
	if self.underlying.IsHandled() {
		self.underlying.Reprepare()
	}

	self.underlying.Handle()
	return self
}

func (self Greeter_SayHello3RPC) Result() (*SayHelloResp, error) {
	if self.underlying.Err != nil {
		return nil, self.underlying.Err
	}

	return self.underlying.Response.(*SayHelloResp), nil
}

func (self Greeter_SayHello3RPC) Close() {
	channel.PutPooledRPC(self.underlying)
	self.underlying = nil
}

func (self Greeter_SayHello3RPC) RequestExtraData() channel.ExtraDataRef {
	return self.underlying.RequestExtraData
}

func (self Greeter_SayHello3RPC) ResponseExtraData() channel.ExtraDataRef {
	return self.underlying.ResponseExtraData
}

func Greeter_NewSayHelloRequest() channel.Message {
	return new(SayHelloReq)
}

func Greeter_NewSayHelloResponse() channel.Message {
	return new(SayHelloResp)
}

func Greeter_NewSayHello2Request() channel.Message {
	return new(SayHelloReq)
}

func Greeter_NewSayHello3Response() channel.Message {
	return new(SayHelloResp)
}
