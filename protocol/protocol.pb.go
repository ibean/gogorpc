// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protocol.proto

package protocol

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type MessageType int32

const (
	MESSAGE_REQUEST   MessageType = 0
	MESSAGE_RESPONSE  MessageType = 1
	MESSAGE_HEARTBEAT MessageType = 2
)

var MessageType_name = map[int32]string{
	0: "MESSAGE_REQUEST",
	1: "MESSAGE_RESPONSE",
	2: "MESSAGE_HEARTBEAT",
}

var MessageType_value = map[string]int32{
	"MESSAGE_REQUEST":   0,
	"MESSAGE_RESPONSE":  1,
	"MESSAGE_HEARTBEAT": 2,
}

func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}

func (MessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2bc2336598a3f7e0, []int{0}
}

type ErrorCode int32

const (
	ERROR_NO                ErrorCode = 0
	ERROR_TOO_MANY_REQUESTS ErrorCode = 1
	ERROR_NOT_FOUND         ErrorCode = 2
	ERROR_BAD_REQUEST       ErrorCode = 3
	ERROR_NOT_IMPLEMENTED   ErrorCode = 4
	ERROR_INTERNAL_SERVER   ErrorCode = 5
	ERROR_USER_DEFINED      ErrorCode = 10000
)

var ErrorCode_name = map[int32]string{
	0:     "ERROR_NO",
	1:     "ERROR_TOO_MANY_REQUESTS",
	2:     "ERROR_NOT_FOUND",
	3:     "ERROR_BAD_REQUEST",
	4:     "ERROR_NOT_IMPLEMENTED",
	5:     "ERROR_INTERNAL_SERVER",
	10000: "ERROR_USER_DEFINED",
}

var ErrorCode_value = map[string]int32{
	"ERROR_NO":                0,
	"ERROR_TOO_MANY_REQUESTS": 1,
	"ERROR_NOT_FOUND":         2,
	"ERROR_BAD_REQUEST":       3,
	"ERROR_NOT_IMPLEMENTED":   4,
	"ERROR_INTERNAL_SERVER":   5,
	"ERROR_USER_DEFINED":      10000,
}

func (x ErrorCode) String() string {
	return proto.EnumName(ErrorCode_name, int32(x))
}

func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2bc2336598a3f7e0, []int{1}
}

type Greeting struct {
	Channel   Greeting_Channel `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel"`
	Handshake []byte           `protobuf:"bytes,2,opt,name=handshake,proto3" json:"handshake,omitempty"`
}

func (m *Greeting) Reset()         { *m = Greeting{} }
func (m *Greeting) String() string { return proto.CompactTextString(m) }
func (*Greeting) ProtoMessage()    {}
func (*Greeting) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bc2336598a3f7e0, []int{0}
}
func (m *Greeting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Greeting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Greeting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Greeting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Greeting.Merge(m, src)
}
func (m *Greeting) XXX_Size() int {
	return m.Size()
}
func (m *Greeting) XXX_DiscardUnknown() {
	xxx_messageInfo_Greeting.DiscardUnknown(m)
}

var xxx_messageInfo_Greeting proto.InternalMessageInfo

func (m *Greeting) GetChannel() Greeting_Channel {
	if m != nil {
		return m.Channel
	}
	return Greeting_Channel{}
}

func (m *Greeting) GetHandshake() []byte {
	if m != nil {
		return m.Handshake
	}
	return nil
}

type Greeting_Channel struct {
	Id                 []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Timeout            int32  `protobuf:"varint,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	IncomingWindowSize int32  `protobuf:"varint,3,opt,name=incoming_window_size,json=incomingWindowSize,proto3" json:"incoming_window_size,omitempty"`
	OutgoingWindowSize int32  `protobuf:"varint,4,opt,name=outgoing_window_size,json=outgoingWindowSize,proto3" json:"outgoing_window_size,omitempty"`
}

func (m *Greeting_Channel) Reset()         { *m = Greeting_Channel{} }
func (m *Greeting_Channel) String() string { return proto.CompactTextString(m) }
func (*Greeting_Channel) ProtoMessage()    {}
func (*Greeting_Channel) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bc2336598a3f7e0, []int{0, 0}
}
func (m *Greeting_Channel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Greeting_Channel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Greeting_Channel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Greeting_Channel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Greeting_Channel.Merge(m, src)
}
func (m *Greeting_Channel) XXX_Size() int {
	return m.Size()
}
func (m *Greeting_Channel) XXX_DiscardUnknown() {
	xxx_messageInfo_Greeting_Channel.DiscardUnknown(m)
}

var xxx_messageInfo_Greeting_Channel proto.InternalMessageInfo

func (m *Greeting_Channel) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Greeting_Channel) GetTimeout() int32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *Greeting_Channel) GetIncomingWindowSize() int32 {
	if m != nil {
		return m.IncomingWindowSize
	}
	return 0
}

func (m *Greeting_Channel) GetOutgoingWindowSize() int32 {
	if m != nil {
		return m.OutgoingWindowSize
	}
	return 0
}

type RequestHeader struct {
	SequenceNumber int32             `protobuf:"varint,1,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	ServiceName    string            `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	MethodName     string            `protobuf:"bytes,3,opt,name=method_name,json=methodName,proto3" json:"method_name,omitempty"`
	ResourceId     string            `protobuf:"bytes,4,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	ExtraData      map[string][]byte `protobuf:"bytes,5,rep,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TraceId        []byte            `protobuf:"bytes,6,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	SpanId         int32             `protobuf:"varint,7,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
}

func (m *RequestHeader) Reset()         { *m = RequestHeader{} }
func (m *RequestHeader) String() string { return proto.CompactTextString(m) }
func (*RequestHeader) ProtoMessage()    {}
func (*RequestHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bc2336598a3f7e0, []int{1}
}
func (m *RequestHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestHeader.Merge(m, src)
}
func (m *RequestHeader) XXX_Size() int {
	return m.Size()
}
func (m *RequestHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestHeader.DiscardUnknown(m)
}

var xxx_messageInfo_RequestHeader proto.InternalMessageInfo

func (m *RequestHeader) GetSequenceNumber() int32 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *RequestHeader) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *RequestHeader) GetMethodName() string {
	if m != nil {
		return m.MethodName
	}
	return ""
}

func (m *RequestHeader) GetResourceId() string {
	if m != nil {
		return m.ResourceId
	}
	return ""
}

func (m *RequestHeader) GetExtraData() map[string][]byte {
	if m != nil {
		return m.ExtraData
	}
	return nil
}

func (m *RequestHeader) GetTraceId() []byte {
	if m != nil {
		return m.TraceId
	}
	return nil
}

func (m *RequestHeader) GetSpanId() int32 {
	if m != nil {
		return m.SpanId
	}
	return 0
}

type ResponseHeader struct {
	SequenceNumber int32  `protobuf:"varint,1,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	NextSpanId     int32  `protobuf:"varint,2,opt,name=next_span_id,json=nextSpanId,proto3" json:"next_span_id,omitempty"`
	ErrorCode      int32  `protobuf:"varint,3,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorDesc      string `protobuf:"bytes,4,opt,name=error_desc,json=errorDesc,proto3" json:"error_desc,omitempty"`
}

func (m *ResponseHeader) Reset()         { *m = ResponseHeader{} }
func (m *ResponseHeader) String() string { return proto.CompactTextString(m) }
func (*ResponseHeader) ProtoMessage()    {}
func (*ResponseHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bc2336598a3f7e0, []int{2}
}
func (m *ResponseHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseHeader.Merge(m, src)
}
func (m *ResponseHeader) XXX_Size() int {
	return m.Size()
}
func (m *ResponseHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseHeader.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseHeader proto.InternalMessageInfo

func (m *ResponseHeader) GetSequenceNumber() int32 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *ResponseHeader) GetNextSpanId() int32 {
	if m != nil {
		return m.NextSpanId
	}
	return 0
}

func (m *ResponseHeader) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *ResponseHeader) GetErrorDesc() string {
	if m != nil {
		return m.ErrorDesc
	}
	return ""
}

type Heartbeat struct {
}

func (m *Heartbeat) Reset()         { *m = Heartbeat{} }
func (m *Heartbeat) String() string { return proto.CompactTextString(m) }
func (*Heartbeat) ProtoMessage()    {}
func (*Heartbeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bc2336598a3f7e0, []int{3}
}
func (m *Heartbeat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Heartbeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Heartbeat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Heartbeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Heartbeat.Merge(m, src)
}
func (m *Heartbeat) XXX_Size() int {
	return m.Size()
}
func (m *Heartbeat) XXX_DiscardUnknown() {
	xxx_messageInfo_Heartbeat.DiscardUnknown(m)
}

var xxx_messageInfo_Heartbeat proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("MessageType", MessageType_name, MessageType_value)
	proto.RegisterEnum("ErrorCode", ErrorCode_name, ErrorCode_value)
	proto.RegisterType((*Greeting)(nil), "Greeting")
	proto.RegisterType((*Greeting_Channel)(nil), "Greeting.Channel")
	proto.RegisterType((*RequestHeader)(nil), "RequestHeader")
	proto.RegisterMapType((map[string][]byte)(nil), "RequestHeader.ExtraDataEntry")
	proto.RegisterType((*ResponseHeader)(nil), "ResponseHeader")
	proto.RegisterType((*Heartbeat)(nil), "Heartbeat")
}

func init() { proto.RegisterFile("protocol.proto", fileDescriptor_2bc2336598a3f7e0) }

var fileDescriptor_2bc2336598a3f7e0 = []byte{
	// 710 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x6e, 0xeb, 0x44,
	0x14, 0x8e, 0x93, 0xa6, 0xa9, 0x4f, 0x42, 0xae, 0xef, 0xd0, 0xab, 0xe6, 0x16, 0x6e, 0x6e, 0xc8,
	0x86, 0xaa, 0x52, 0x53, 0x28, 0x1b, 0x84, 0xba, 0x20, 0x69, 0xa6, 0x6d, 0xa4, 0xc6, 0x29, 0x63,
	0x17, 0x04, 0x1b, 0x6b, 0x62, 0x1f, 0x12, 0xab, 0x89, 0x27, 0xd8, 0xe3, 0xfe, 0x3d, 0x45, 0x77,
	0x88, 0xc7, 0xe0, 0x2d, 0xba, 0x41, 0xea, 0x92, 0x15, 0x82, 0xf6, 0x19, 0xd8, 0x23, 0x8f, 0x3b,
	0x0d, 0x65, 0xc7, 0xee, 0x7c, 0x3f, 0x67, 0xe6, 0xf3, 0xf1, 0xe8, 0x40, 0x7d, 0x11, 0x0b, 0x29,
	0x7c, 0x31, 0xeb, 0xa8, 0x62, 0x73, 0x67, 0x12, 0xca, 0x69, 0x3a, 0xee, 0xf8, 0x62, 0xbe, 0x3b,
	0x11, 0x13, 0xb1, 0xab, 0xe8, 0x71, 0xfa, 0xa3, 0x42, 0x0a, 0xa8, 0x2a, 0xb7, 0xb7, 0xff, 0x36,
	0x60, 0xed, 0x28, 0x46, 0x94, 0x61, 0x34, 0x21, 0x9f, 0x43, 0xc5, 0x9f, 0xf2, 0x28, 0xc2, 0x59,
	0xc3, 0x68, 0x19, 0x5b, 0xd5, 0xbd, 0xd7, 0x1d, 0xad, 0x75, 0x0e, 0x72, 0xa1, 0xb7, 0x72, 0xf7,
	0xc7, 0xfb, 0x02, 0xd3, 0x3e, 0xf2, 0x31, 0x98, 0x53, 0x1e, 0x05, 0xc9, 0x94, 0x9f, 0x63, 0xa3,
	0xd8, 0x32, 0xb6, 0x6a, 0x6c, 0x49, 0x6c, 0xfe, 0x6c, 0x40, 0xe5, 0xa9, 0x91, 0xd4, 0xa1, 0x18,
	0x06, 0xea, 0xdc, 0x1a, 0x2b, 0x86, 0x01, 0x69, 0x40, 0x45, 0x86, 0x73, 0x14, 0xa9, 0x54, 0x7d,
	0x65, 0xa6, 0x21, 0xf9, 0x0c, 0xd6, 0xc3, 0xc8, 0x17, 0xf3, 0x30, 0x9a, 0x78, 0x97, 0x61, 0x14,
	0x88, 0x4b, 0x2f, 0x09, 0x6f, 0xb0, 0x51, 0x52, 0x36, 0xa2, 0xb5, 0xef, 0x94, 0xe4, 0x84, 0x37,
	0x98, 0x75, 0x88, 0x54, 0x4e, 0xc4, 0x7f, 0x3b, 0x56, 0xf2, 0x0e, 0xad, 0x2d, 0x3b, 0xda, 0xbf,
	0x15, 0xe1, 0x03, 0x86, 0x3f, 0xa5, 0x98, 0xc8, 0x63, 0xe4, 0x01, 0xc6, 0xe4, 0x53, 0x78, 0x95,
	0x64, 0x44, 0xe4, 0xa3, 0x17, 0xa5, 0xf3, 0x31, 0xc6, 0x2a, 0x6c, 0x99, 0xd5, 0x35, 0x6d, 0x2b,
	0x96, 0x7c, 0x02, 0xb5, 0x04, 0xe3, 0x8b, 0x30, 0xf3, 0xf1, 0x79, 0xfe, 0xd5, 0x26, 0xab, 0x3e,
	0x71, 0x36, 0x9f, 0x23, 0x79, 0x0f, 0xd5, 0x39, 0xca, 0xa9, 0x08, 0x72, 0x47, 0x49, 0x39, 0x20,
	0xa7, 0xb4, 0x21, 0xc6, 0x44, 0xa4, 0xb1, 0x8f, 0x5e, 0x18, 0xa8, 0x9c, 0x26, 0x03, 0x4d, 0x0d,
	0x02, 0xb2, 0x0f, 0x80, 0x57, 0x32, 0xe6, 0x5e, 0xc0, 0x25, 0x6f, 0x94, 0x5b, 0xa5, 0xad, 0xea,
	0xde, 0xbb, 0xce, 0x8b, 0xc4, 0x1d, 0x9a, 0x19, 0xfa, 0x5c, 0x72, 0x1a, 0xc9, 0xf8, 0x9a, 0x99,
	0xa8, 0x31, 0x79, 0x0b, 0x6b, 0x32, 0xe6, 0xf9, 0xd9, 0xab, 0x6a, 0xe2, 0x15, 0x85, 0x07, 0x01,
	0xd9, 0x80, 0x4a, 0xb2, 0xe0, 0x51, 0xa6, 0x54, 0xd4, 0xe7, 0xad, 0x66, 0x70, 0x10, 0x6c, 0xee,
	0x43, 0xfd, 0xe5, 0x81, 0xc4, 0x82, 0xd2, 0x39, 0x5e, 0xab, 0x29, 0x98, 0x2c, 0x2b, 0xc9, 0x3a,
	0x94, 0x2f, 0xf8, 0x2c, 0xd5, 0x7f, 0x3a, 0x07, 0x5f, 0x15, 0xbf, 0x34, 0xda, 0xbf, 0x18, 0x50,
	0x67, 0x98, 0x2c, 0x44, 0x94, 0xe0, 0xff, 0x1d, 0x68, 0x0b, 0x6a, 0x11, 0x5e, 0x49, 0x4f, 0xe7,
	0xca, 0x9f, 0x03, 0x64, 0x9c, 0xa3, 0xb2, 0x91, 0x77, 0x00, 0x18, 0xc7, 0x22, 0xf6, 0x7c, 0x11,
	0xe8, 0x77, 0x60, 0x2a, 0xe6, 0x40, 0x04, 0xb8, 0x94, 0x03, 0x4c, 0xfc, 0xa7, 0x61, 0xe6, 0x72,
	0x1f, 0x13, 0xbf, 0x5d, 0x05, 0xf3, 0x18, 0x79, 0x2c, 0xc7, 0xc8, 0xe5, 0xf6, 0x08, 0xaa, 0x43,
	0x4c, 0x12, 0x3e, 0x41, 0xf7, 0x7a, 0x81, 0xe4, 0x43, 0x78, 0x35, 0xa4, 0x8e, 0xd3, 0x3d, 0xa2,
	0x1e, 0xa3, 0xdf, 0x9c, 0x51, 0xc7, 0xb5, 0x0a, 0x64, 0x1d, 0xac, 0x25, 0xe9, 0x9c, 0x8e, 0x6c,
	0x87, 0x5a, 0x06, 0x79, 0x03, 0xaf, 0x35, 0x7b, 0x4c, 0xbb, 0xcc, 0xed, 0xd1, 0xae, 0x6b, 0x15,
	0xb7, 0x7f, 0x35, 0xc0, 0xa4, 0xcf, 0x51, 0x6a, 0xb0, 0x46, 0x19, 0x1b, 0x31, 0xcf, 0x1e, 0x59,
	0x05, 0xf2, 0x11, 0x6c, 0xe4, 0xc8, 0x1d, 0x8d, 0xbc, 0x61, 0xd7, 0xfe, 0x5e, 0x5f, 0xe2, 0x58,
	0x46, 0x76, 0xb5, 0xb6, 0xba, 0xde, 0xe1, 0xe8, 0xcc, 0xee, 0x5b, 0xc5, 0xec, 0x92, 0x9c, 0xec,
	0x75, 0xfb, 0xcf, 0x89, 0x4a, 0xe4, 0x2d, 0xbc, 0x59, 0x7a, 0x07, 0xc3, 0xd3, 0x13, 0x3a, 0xa4,
	0xb6, 0x4b, 0xfb, 0xd6, 0xca, 0x52, 0x1a, 0xd8, 0x2e, 0x65, 0x76, 0xf7, 0xc4, 0x73, 0x28, 0xfb,
	0x96, 0x32, 0xab, 0x4c, 0x36, 0x80, 0xe4, 0xd2, 0x99, 0x43, 0x99, 0xd7, 0xa7, 0x87, 0x03, 0x9b,
	0xf6, 0xad, 0x5b, 0xbb, 0xf7, 0xf5, 0xfd, 0x5f, 0xcd, 0xc2, 0xdd, 0x43, 0xd3, 0xb8, 0x7f, 0x68,
	0x1a, 0x7f, 0x3e, 0x34, 0x8d, 0xdb, 0xc7, 0x66, 0xe1, 0xfe, 0xb1, 0x59, 0xf8, 0xfd, 0xb1, 0x59,
	0xf8, 0xa1, 0xfd, 0xaf, 0x15, 0x32, 0x43, 0xb9, 0x73, 0xb3, 0x93, 0xad, 0x91, 0x71, 0xbc, 0xf0,
	0x77, 0xf5, 0xb2, 0x19, 0xaf, 0xaa, 0xea, 0x8b, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x9b, 0x3d,
	0xfd, 0x3c, 0x7f, 0x04, 0x00, 0x00,
}

func (m *Greeting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Greeting) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintProtocol(dAtA, i, uint64(m.Channel.Size()))
	n1, err1 := m.Channel.MarshalTo(dAtA[i:])
	if err1 != nil {
		return 0, err1
	}
	i += n1
	if len(m.Handshake) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Handshake)))
		i += copy(dAtA[i:], m.Handshake)
	}
	return i, nil
}

func (m *Greeting_Channel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Greeting_Channel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Timeout != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.Timeout))
	}
	if m.IncomingWindowSize != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.IncomingWindowSize))
	}
	if m.OutgoingWindowSize != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.OutgoingWindowSize))
	}
	return i, nil
}

func (m *RequestHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SequenceNumber != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.SequenceNumber))
	}
	if len(m.ServiceName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.ServiceName)))
		i += copy(dAtA[i:], m.ServiceName)
	}
	if len(m.MethodName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.MethodName)))
		i += copy(dAtA[i:], m.MethodName)
	}
	if len(m.ResourceId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.ResourceId)))
		i += copy(dAtA[i:], m.ResourceId)
	}
	if len(m.ExtraData) > 0 {
		for k, _ := range m.ExtraData {
			dAtA[i] = 0x2a
			i++
			v := m.ExtraData[k]
			byteSize := 0
			if len(v) > 0 {
				byteSize = 1 + len(v) + sovProtocol(uint64(len(v)))
			}
			mapSize := 1 + len(k) + sovProtocol(uint64(len(k))) + byteSize
			i = encodeVarintProtocol(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintProtocol(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if len(v) > 0 {
				dAtA[i] = 0x12
				i++
				i = encodeVarintProtocol(dAtA, i, uint64(len(v)))
				i += copy(dAtA[i:], v)
			}
		}
	}
	if len(m.TraceId) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.TraceId)))
		i += copy(dAtA[i:], m.TraceId)
	}
	if m.SpanId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.SpanId))
	}
	return i, nil
}

func (m *ResponseHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SequenceNumber != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.SequenceNumber))
	}
	if m.NextSpanId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.NextSpanId))
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(m.ErrorCode))
	}
	if len(m.ErrorDesc) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.ErrorDesc)))
		i += copy(dAtA[i:], m.ErrorDesc)
	}
	return i, nil
}

func (m *Heartbeat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Heartbeat) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintProtocol(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Greeting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Channel.Size()
	n += 1 + l + sovProtocol(uint64(l))
	l = len(m.Handshake)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}

func (m *Greeting_Channel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.Timeout != 0 {
		n += 1 + sovProtocol(uint64(m.Timeout))
	}
	if m.IncomingWindowSize != 0 {
		n += 1 + sovProtocol(uint64(m.IncomingWindowSize))
	}
	if m.OutgoingWindowSize != 0 {
		n += 1 + sovProtocol(uint64(m.OutgoingWindowSize))
	}
	return n
}

func (m *RequestHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SequenceNumber != 0 {
		n += 1 + sovProtocol(uint64(m.SequenceNumber))
	}
	l = len(m.ServiceName)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	l = len(m.MethodName)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	l = len(m.ResourceId)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if len(m.ExtraData) > 0 {
		for k, v := range m.ExtraData {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovProtocol(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovProtocol(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovProtocol(uint64(mapEntrySize))
		}
	}
	l = len(m.TraceId)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.SpanId != 0 {
		n += 1 + sovProtocol(uint64(m.SpanId))
	}
	return n
}

func (m *ResponseHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SequenceNumber != 0 {
		n += 1 + sovProtocol(uint64(m.SequenceNumber))
	}
	if m.NextSpanId != 0 {
		n += 1 + sovProtocol(uint64(m.NextSpanId))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovProtocol(uint64(m.ErrorCode))
	}
	l = len(m.ErrorDesc)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}

func (m *Heartbeat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovProtocol(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProtocol(x uint64) (n int) {
	return sovProtocol(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Greeting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Greeting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Greeting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handshake", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Handshake = append(m.Handshake[:0], dAtA[iNdEx:postIndex]...)
			if m.Handshake == nil {
				m.Handshake = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Greeting_Channel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Channel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Channel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncomingWindowSize", wireType)
			}
			m.IncomingWindowSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IncomingWindowSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutgoingWindowSize", wireType)
			}
			m.OutgoingWindowSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutgoingWindowSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceNumber", wireType)
			}
			m.SequenceNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SequenceNumber |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MethodName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MethodName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtraData == nil {
				m.ExtraData = make(map[string][]byte)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocol
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtocol
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthProtocol
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthProtocol
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtocol
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthProtocol
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthProtocol
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipProtocol(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthProtocol
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ExtraData[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TraceId = append(m.TraceId[:0], dAtA[iNdEx:postIndex]...)
			if m.TraceId == nil {
				m.TraceId = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpanId", wireType)
			}
			m.SpanId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpanId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceNumber", wireType)
			}
			m.SequenceNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SequenceNumber |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextSpanId", wireType)
			}
			m.NextSpanId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextSpanId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Heartbeat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Heartbeat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Heartbeat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProtocol(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProtocol
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthProtocol
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowProtocol
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipProtocol(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthProtocol
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthProtocol = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProtocol   = fmt.Errorf("proto: integer overflow")
)
